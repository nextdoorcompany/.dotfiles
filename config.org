* thank you

+ [[https://www.gnu.org/software/emacs/manual/][The Manual]]
+ [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org][Harry Schwartz]]
+ [[https://github.com/howardabrams/dot-files/blob/master/emacs.org][Howard Abrams]]
+ [[https://karl-voit.at/][Karl Voit]]
+ [[https://www.masteringemacs.org/][Mickey Petersen]]
+ [[https://github.com/zamansky/using-emacs/blob/master/myinit.org][Mike Zamansky]]
+ [[https://protesilaos.com/][Protesilaos Stavrou]]
+ [[https://sachachua.com/blog/][Sacha Chua]]
+ [[https://github.com/purcell][Steve Purcell]]
+ [[https://github.com/Wilfred/.emacs.d/blob/gh-pages/init.org][Wilfred Hughes]]

* external dependencies

The system must have the programs below.  Also see the paths section for required files.

+ [[http://aspell.net/][aspell]]
+ [[https://ftp.gnu.org/gnu/aspell/dict/en/][aspell-en]]
+ [[https://github.com/BurntSushi/ripgrep][ripgrep]]
+ [[https://www.ghostscript.com/][ghostscript]]
+ [[https://git-scm.com/][git]]
+ [[http://tug.org/texlive/][texlive]] or [[https://miktex.org/][miktex]]
+ [[https://www.gnu.org/software/diffutils/][diff]]
+ [[https://www.ledger-cli.org/][ledger]]
+ [[https://github.com/sharkdp/fd][fd]]
+ [[https://en.wikipedia.org/wiki/Tree_%28command%29][tree]]

These are optional programs.  Sqlformat and black are assumed to be in the project's
virtualenv.

+ [[https://www.python.org/][python]]
+ [[https://github.com/andialbrecht/sqlparse][sqlformat]]
+ [[https://github.com/psf/black][black]]
+ [[https://graphviz.org/][dot]]
+ [[https://openjdk.org/][java]]
+ [[https://clojure.org/][clojure]]
+ [[https://leiningen.org/][leiningen]]

#+BEGIN_SRC emacs-lisp
  (let ((programs '("aspell" "rg" "gs" "git" "pdflatex" "pdftotext" "diff" "ledger" "dot" "fd" "tree")))
    (dolist (prog programs)
      (when (not (executable-find prog))
        (let ((inhibit-message t))
          (message "Program %s not found" prog)))))
#+END_SRC

* package repositories

#+BEGIN_SRC emacs-lisp
  (setq package-archives
        '(("gnu" . "https://elpa.gnu.org/packages/")
          ("melpa" . "https://melpa.org/packages/")))
#+END_SRC


* hide unwanted mode information from mode line

[[https://github.com/myrjola/diminish.el][diminish]] [[https://melpa.org/#/diminish][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    )
#+END_SRC

* general

#+BEGIN_SRC emacs-lisp
  (setq visible-bell t)
  (setq confirm-kill-emacs #'y-or-n-p)
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message nil)
  (setq visual-line-fringe-indicators t)
  (setq scroll-conservatively 10000)
  (setq scroll-preserve-screen-position t)
  (setq next-screen-context-lines 10)
  (setq bookmark-set-fringe-mark nil)
#+END_SRC

* paths

Ensure certain directories are always available.  Taken directly from Howard Abrams.
Explicitly set storage files.

#+BEGIN_SRC emacs-lisp
  (let* ((subdirs '("local_elisp"))
         (fulldirs (mapcar (lambda (d) (expand-file-name d "~/.emacs.d") ) subdirs)))
    (dolist (dir fulldirs)
      (when (not (file-exists-p dir))
        (message "Make directory: %s" dir)
        (make-directory dir))))

  (let* ((filenames '("ephemera.org" "kanban.org" "notes.org" "elfeed.org" "books.org"))
         (fullnames (mapcar (lambda (d) (expand-file-name d "~/org") ) filenames)))
    (dolist (file fullnames)
      (when (not (file-exists-p file))
        (let ((inhibit-message t))
          (message "File %s not found" file)))))

  (add-to-list 'load-path "~/.emacs.d/local_elisp")

  (setq abbrev-file-name "~/.emacs.d/abbrev_defs")
  (setq bookmark-default-file "~/.emacs.d/bookmarks")
  (setq diary-file "~/.emacs.d/diary")
#+END_SRC

* display

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (when window-system
    (scroll-bar-mode -1)
    (global-hl-line-mode 1))
#+END_SRC

* editing

+ If text is selected, typing deletes it.
+ Add newline to bottom of every file.
+ Prevent tab insertion.
+ Let presses to C-<SPC> after C-u C-<SPC> continue to pop mark ring
+ Remove the warnings around capitalization functions.
+ Remove warning for using "a" in dired to find file and close dired buffer.
+ Remove warning for narrow to region.
+ If there are two dired buffers open, copy and move default to the other one.
+ Use the same backslashes for regex isearch and re-builder.
+ Use the trash ~/.local/share/Trash/files.  C-d will delete.
+ Pretty print result of eval thank you to Karthinks [[https://karthinks.com/software/an-elisp-editing-tip/][blog]].
+ Switch to help window see [[https://www.reddit.com/r/emacs/comments/ynr33i/comment/ivag10u/?utm_source=share&utm_medium=web2x&context=3][Reddit.]]

#+BEGIN_SRC emacs-lisp
  (setq column-number-mode t)
  (delete-selection-mode t)
  (setq require-final-newline t)
  (setq-default indent-tabs-mode nil)
  (setq set-mark-command-repeat-pop t)
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
  (put 'dired-find-alternate-file 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (setq dired-dwim-target t)
  (setq reb-re-syntax 'string)
  (setq delete-by-moving-to-trash t)
  (global-set-key [remap eval-last-sexp] 'pp-eval-last-sexp)
  (setq help-window-select t)
  (global-set-key (kbd "C-c p") 'delete-pair)
  (global-set-key (kbd "C-c q") 'raise-sexp)

#+END_SRC

* font

Matthew Butterick's [[https://mbtype.com/fonts/triplicate/][Triplicate]] font.  Also see online text [[https://practicaltypography.com/][Practical Typography]].  Font can also be changed using the menu system.

#+BEGIN_SRC emacs-lisp
  (setq js/default-font-height 240)
  (setq frame-inhibit-implied-resize t)

  (cond ((member "xos4 Terminus" (font-family-list))
         (set-face-attribute 'default nil :font "xos4 Terminus"))
        ((member "Ubuntu Mono" (font-family-list))
         (set-face-attribute 'default nil :font "Ubuntu Mono"))
        ((member "Triplicate T4c" (font-family-list))
         (set-face-attribute 'default nil :font "Triplicate T4c")))

  (set-face-attribute 'default nil :height js/default-font-height)

  (defun js/change-face-height (height)
    "Changes height for default face."
    (interactive
     (list (read-from-minibuffer (format "Enter new height (current is %s) or press <RET> for default (%s): "
                                         (face-attribute 'default :height) js/default-font-height)
                                 nil nil t nil (number-to-string js/default-font-height))))
    (set-face-attribute 'default nil :height height))

  (defun js/change_face ()
    (interactive)
    (let ((font (js/counsel-fonts-no-insert)))
      (set-face-attribute 'default nil :font font)))

  (defun js/counsel-fonts-no-insert ()
    (let ((current-font
           (symbol-name (font-get (face-attribute 'default :font) :family))))
      (completing-read "Font: " (delete-dups (font-family-list)) nil t current-font)))
#+END_SRC

* spelling

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :ensure t
    :diminish flyspell-mode

    :config
    (setq ispell-program-name "aspell"
          ispell-local-dictionary "en_US"
          ispell-dictionary "american"
          ispell-extra-args '("--sug-mode=ultra" "--lang=en_US")
          ispell-list-command "--list"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq dictionary-server "dict.org")
  (defalias 'ds #'dictionary-search)
#+END_SRC

* ElDoc

[[https://www.emacswiki.org/emacs/ElDoc][ElDoc]]

#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :diminish eldoc-mode)
#+END_SRC

* new scratch buffers

Functions come from Harry Schwartz.  Most workflows start with one of these.

#+BEGIN_SRC emacs-lisp
        (defun js/new-buffer-checked ()
            "Create and switch to a temporary scratch org buffer with a random
             name.  Include spell checking."
            (interactive)
            (switch-to-buffer (make-temp-name "scratch-"))
            (org-mode)
            (flyspell-mode)
            (visual-line-mode))

        (global-set-key (kbd "C-c f") 'js/new-buffer-checked)

        (defun js/new-bom ()
            "Create and switch bom scratch buffer"
            (interactive)
            (switch-to-buffer (make-temp-name "bom-"))
            (org-mode)
            (insert
  "#+HTML_HEAD: <style>body {font-size: xx-large;}</style>
  ,#+OPTIONS: html-postamble:nil date:nil
  ,#+TITLE:BOM
  ,#+ATTR_HTML: :border2 :rules all :frame border
  ,#+LaTeX_HEADER: \\usepackage{extsizes}
  ,#+latex_class_options: [17pt]
  | /    | <>|<> |<>   |
  | ITEM | 0 | 1 | SUM |
  |------+---+---+-----|
  |      |   |   |   3 |
  ,#+TBLFM: $4=vsum($2..$3)"
      )
            (goto-char 294)
            (if (file-exists-p "c:/Users/justin/Dropbox/Documents/job files")
                (cd "c:/Users/justin/Dropbox/Documents/job files")
              (cd "~/org")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun js/new-snippet ()
    "Create a scratch buffer for writing an ephemeral snippet."
    (interactive)
    (switch-to-buffer (make-temp-name "snippet-"))
    (lisp-interaction-mode)
    (insert
     ";; Hit <f6> after tag to run.

;; elements
;; any string in double quotes
;; (p \"Prompt: \" NAME) prompts and stores value.  Optionally inserts, use 'noinsert as the final argument
;; (s NAME) inserts value

;; more info M-x find-library tempo

(tempo-define-template \"jjt\"
                       '()        ; elements here
                       \"jjt\"
                       \"docstring\")

jjt


;; skeleton

(define-skeleton jj/s
  \"Generates a greeting.\"
  \"Name: \"
  \"Hello \"
  str)

(define-skeleton jj/s
  \"Generates a loud greeting.\"
  nil
  \"Hello \"
  '(setq v1 (skeleton-read \"Name: \"))
  (upcase v1))

(define-skeleton jj/s
  \"Asks a lot of questions.\"
  \"Q1: \"
  str
  \" --- \"
  (skeleton-read \"Q2: \")
  \" +++ \"
  (upcase (skeleton-read \"Q3: \")))


;; Repeating skeleton.  STR is the value of the first prompt.

(define-skeleton jj/s
  \"docstring\"
  \"\"
  (\"Prompt: \" str (skeleton-read \"Prompt: \") \\n))

(jj/s)

; use M-x global-set-key to set the key.  The tempo function will be tempo-template-<name>"))
#+END_SRC
* copy a date from the calendar into the kill ring

[[https://emacs.stackexchange.com/questions/41978/how-to-retrieve-the-date-under-the-cursor-in-emacs-calendar-as-the-format-day-mo][Stack Overflow]]

#+BEGIN_SRC emacs-lisp
  (defcustom calendar-copy-as-kill-format "%Y-%m-%d"
    "Format string for formatting calendar dates with `format-time-string'."
    :type 'string
    :group 'calendar)

  (defun calendar-copy-as-kill ()
    "Copy date at point as kill if region is not active.
  Delegate to `kill-ring-save' otherwise."
    (interactive)
    (if (use-region-p)
        (call-interactively #'kill-ring-save)
      (let ((date (calendar-cursor-to-date)))
        (when date
          (setq date (encode-time 0 0 0 (nth 1 date) (nth 0 date) (nth 2 date)))
          (kill-new (format-time-string calendar-copy-as-kill-format date))))))

  (defun my-calendar-mode-hook-fun ()
    "Let \[kill-ring-save] copy the date at point if region is not active."
    (local-set-key [remap kill-ring-save] #'calendar-copy-as-kill))

  (add-hook 'calendar-mode-hook #'my-calendar-mode-hook-fun)
#+END_SRC

* direct changes from customize into specific file

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

* file backups

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        '(("." . "~/emacs_backups")))
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq delete-old-versions t)
  (setq kept-old-versions 1)
  (setq kept-new-versions 5)
  (setq backup-by-copying t)
#+END_SRC

* various mode hooks

#+BEGIN_SRC emacs-lisp
  (add-hook 'today-visible-calendar-hook 'calendar-mark-today)

  (add-hook 'python-mode-hook
       (lambda ()
         (display-line-numbers-mode 1)
         (superword-mode 1)))

  (add-hook 'python-mode-hook
            (lambda ()
              (add-to-list 'write-file-functions 'delete-trailing-whitespace)))

  (add-hook 'dired-mode-hook
            (lambda ()
              (dired-hide-details-mode 1)))

  (add-hook 'eshell-mode-hook
            (lambda ()
              (display-line-numbers-mode 1)))

  (add-hook 'org-mode-hook
            (lambda ()
              (visual-line-mode 1)))

  (add-hook 'occur-hook
            (lambda ()
              (select-window (get-buffer-window "*Occur*"))))
#+END_SRC

* enable recent file tracking

[[https://www.masteringemacs.org/article/find-files-faster-recent-files-package][Mastering Emacs]]

#+BEGIN_SRC emacs-lisp
  (recentf-mode t)
  (setq recentf-max-saved-items 150)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun js/find-recent-file (selection)
      (interactive
       (list (completing-read "Find recent file: " recentf-list)))
      (find-file selection))
  (global-set-key (kbd "C-x C-r") #'recentf-open)
#+END_SRC


* org mode housekeeping

Inspired by Karl Voit's [[https://karl-voit.at/2014/08/10/bookmarks-with-orgmode/][post]], started using org mode for storing bookmarks.  Abrams also
discusses capture templates extensively.  His gentle introduction is  [[http://howardism.org/Technical/Emacs/capturing-intro.html][here]].

I don't want to confirm every time babel evaluates.

Lesson learned the hard way.  Again Karl Voit to the [[https://karl-voit.at/2014/08/20/org-losses-determining-post-commit/][rescue]].

#+BEGIN_SRC emacs-lisp

  (setq org-agenda-files (quote ("~/org/ephemera.org" "~/org/kanban.org" "~/org/notes.org" "~/org/habits.org" "~/org/warnings.org")))
  (setq org-export-with-toc nil)
  (setq org-html-postamble nil)
  (setq org-cycle-separator-lines 0)
  (setq org-refile-targets '((nil . (:maxlevel . 2))))
  (setq org-confirm-babel-evaluate nil)
  (setq org-agenda-span 'day)
  (setq org-cycle-emulate-tab 'white)
  (setq org-agenda-window-setup 'current-window)
  (setq org-return-follows-link t)
  (setq org-startup-folded t)
  (setq org-adapt-indentation nil)
  (setq org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
  (setq org-use-speed-commands t)
  (setq org-catch-invisible-edits 'show-and-error)
  (setq org-ctrl-k-protect-subtree t)
  (setq org-todo-keywords
        '((sequence "TODO" "|" "DONE")
          (sequence "BLOCKED")))
  (setq org-publish-project-alist
        '(("keyboard"
           :base-directory "~/notes/"
           :exclude "org"
           :include ("keyboard.org")
           :publishing-function org-html-publish-to-html
           :publishing-directory "~/org/html")))

  (setq org-capture-templates
        (quote
         (("e" "TODO ephemera" entry
           (file "~/org/ephemera.org")
           "* TODO %?\nSCHEDULED: %t")
          ("b" "bookmark clipped link" entry
           (file "~/org/notes.org")
           "* [[%?]] \n:PROPERTIES:\n:CREATED: %U\n:END:\n"
           :empty-lines 1)
          ("f" "blood pressure" table-line
           (file "~/org/bp.org")
           "| %^{date}U | %^{sys} | %^{dia} | %^{pulse}")
          ("t" "TODO kanban/tasks" entry
           (file+headline "~/org/kanban.org" "tasks")
           "* TODO %?\nSCHEDULED: %t")
          ("u" "TODO ephemera/unfiled" entry
           (file+headline "~/org/ephemera.org" "unfiled")
           "* TODO %?")
          ("o" "TODO book" entry
           (file "~/org/books.org")
           (function js/build-book-template) :empty-lines 1))))

  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c a") 'org-agenda-list)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (dot . t)))

  (define-key org-mode-map (kbd "C-c C-x C-s") nil)

  (add-to-list 'org-modules 'org-habit)
  (require 'org-habit)

  (add-to-list 'org-speed-commands
               '("S" . (org-insert-subheading '(4))))

  (defun js/org-export-ascii-to-kill ()
    "Exports current org buffer as ascii to kill ring."
    (interactive)
    (kill-new (org-export-as 'ascii)))

  (defun js/build-book-template ()
    (let ((title (capitalize (read-string "Title: ")))
          (author (capitalize (read-string "Author l,f: ")))
          (date-read (read-string "Date read: " (format-time-string "%F")))
          (rating (read-string "Rating 1-5: " "4")))
      (format "* %s\n  :PROPERTIES:\n  :AUTHOR: %s\n  :DATE_READ: %s\n  :RATING:   %s\n  :TITLE:    %s\n  :END:" title author date-read rating title)))

  (defun js/org-return (arg)
    "If ARG or not in a list behave normally, otherwise add a list item."
    (interactive "P")
    (if (and (org-in-item-p) (null arg))
        (org-insert-item)
      (org-return)))

  (define-key org-mode-map [remap org-return] #'js/org-return)

  (defun js/flush-all-blank-lines ()
    "Remove all lines containing only whitespace in a buffer."
    (interactive)
    (save-excursion
      (beginning-of-buffer)
      (flush-lines "^ *$")))

  (advice-add #'org-agenda-todo :after #'org-agenda-redo-all)

  (setq org-goto-interface 'outline-path-completion)
  (setq org-outline-path-complete-in-steps nil)
#+END_SRC
* org color link type
[[https://orgmode.org/worg/org-faq.html#org64ae339][Worg]]
#+BEGIN_SRC emacs-lisp
  (org-add-link-type
   "color"
   (lambda (path)
     (message (concat "color "
                      (progn (add-text-properties
                              0 (length path)
                              (list 'face `((t (:foreground ,path))))
                              path) path))))
   (lambda (path desc format)
     (cond
      ((eq format 'html)
       (format "<span style=\"color:%s;\">%s</span>" path desc))
      ((eq format 'latex)
       (format "{\\color{%s}%s}" path desc)))))
#+END_SRC
* expand region based on context

[[https://github.com/magnars/expand-region.el][expand-region]] [[https://melpa.org/#/expand-region][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
#+END_SRC


* editing helpers

[[https://github.com/bbatsov/crux][crux]] [[https://melpa.org/#/crux][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package crux
    :ensure t
    :bind (("C-a" . crux-move-beginning-of-line)
           ("S-<return>" . crux-smart-open-line)
           ("C-c M-d" . crux-duplicate-and-comment-current-line-or-region)
           ("C-x 4 t" . crux-transpose-windows)
           ("C-c t" . crux-visit-term-buffer)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-z") 'zap-up-to-char)
  (global-set-key (kbd "C-c <DEL>") 'kill-whole-line)
  (global-set-key (kbd "C-c d") #'duplicate-dwim)
  (defalias 'eb 'eval-buffer)
  (defalias 'cal 'calendar)
#+END_SRC

* testing packages

[[https://github.com/larstvei/Try][try]] [[https://melpa.org/#/try][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

* disable mouse

[[https://github.com/purcell/disable-mouse/tree/541363bd6353b8b05375552bab884a6315ea545c][disable-mouse]] [[https://melpa.org/#/disable-mouse][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package disable-mouse
    :ensure t
    :diminish disable-mouse-global-mode
    :config
    (global-disable-mouse-mode))
#+END_SRC

* ibuffer

Mike Zamansky [[https://github.com/zamansky/using-emacs/blob/master/myinit.org][init]] [[https://cestlaz-nikola.github.io/posts/using-emacs-34-ibuffer-emmet/#.W6evkrQpA5k][video]]

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (or (mode . org-mode)
                            (mode . org-agenda-mode)))
                 ("python" (mode . python-mode))
                 ("clojure" (or (mode . clojure-mode)
                                (mode . cider-repl-mode)))
                 ("elisp" (or (mode . emacs-lisp-mode)
                              (mode . lisp-interaction-mode)))
                 ("html" (mode . mhtml-mode))
                 ("css" (mode . css-mode))
                 ("javascript" (mode . js-mode))
                 ("exwm" (mode . exwm-mode))
                 ("eshell" (mode . eshell-mode))
                 ("magit" (or (mode . magit-status-mode)
                              (mode . magit-process-mode)
                              (mode . magit-diff-mode)))
                 ("help" (or (mode . helpful-mode)
                             (mode . Info-mode)
                             (mode . help-mode)))
                 ("message" (mode . message-mode))
                 ("sql" (or (mode . sql-mode)
                            (mode . sql-interactive-mode)))
                 ("rst" (mode . rst-mode))
                 ("data" (or (mode . yaml-mode)
                             (mode . conf-toml-mode)
                             (mode . conf-unix-mode)
                             (mode . js-json-mode)))))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")
              (define-key ibuffer-mode-map (kbd "(")
                'ibuffer-switch-format)))
  (setq ibuffer-show-empty-filter-groups nil)
  (setq ibuffer-formats '((mark modified read-only locked " "
                                (name 16 -1))
                          (mark modified read-only locked " "
                                (name 18 18 :left :elide)
                                " "
                                (size 9 -1 :right)
                                " "
                                (mode 16 16 :left :elide)
                                " " filename-and-process)))

#+END_SRC

* upcase table

#+BEGIN_SRC emacs-lisp
  (defun js/upcase-table ()
    "Makes all text in an org table upper case."
    (interactive)
    (when (org-at-table-p)
      (upcase-region (org-table-begin) (org-table-end))))
#+END_SRC

* mail

#+BEGIN_SRC emacs-lisp
  (use-package sendmail
    :commands
    (mail-send)
    :init
    (setq mailclient-place-body-on-clipboard-flag nil)
    (setq message-kill-buffer-query nil)
    (setq send-mail-function (quote mailclient-send-it))
    (setq message-required-headers (quote ((optional . References))))
    (setq message-auto-save-directory nil)
    (defun js/message-upcase-subject ()
    "Capitalize the subject of a mail message."
    (interactive)
    (save-excursion
      (beginning-of-buffer)
      (if (re-search-forward "^Subject:\\(.+\\)$" nil t 1)
          (upcase-region (match-beginning 1) (match-end 1)))))
    (defun js/mail-send-and-kill (arg)
      "Send a message and dispose of the buffer."
      (interactive "P")
      (when arg
          (js/message-upcase-subject))
      (set-visited-file-name nil t)
      (mail-send)
      (message-kill-buffer))
    (add-hook 'message-mode-hook
              (lambda ()
                (define-key message-mode-map (kbd "C-c s")
                  'js/mail-send-and-kill)))
    :hook
    ((message-mode . turn-on-orgtbl)
     (message-mode . turn-off-auto-fill)
     (message-mode . turn-on-flyspell)))
#+END_SRC

* recentf-ext

This [[https://twitter.com/xenodium/status/1082020496466690048][tweet]] from Alvaro Ramirez came right when I was thinking about how to quickly get to directories without using bookmarks.

[[https://github.com/rubikitch/recentf-ext/tree/450de5f8544ed6414e88d4924d7daa5caa55b7fe][recentf-ext]] [[https://melpa.org/#/recentf-ext][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package recentf-ext
    :ensure t)
#+END_SRC

* make comma separated lists of tags

[[https://stackoverflow.com/questions/17922208/emacs-convert-items-on-separate-lines-to-a-comma-separated-list][Stack Overflow]]

#+BEGIN_SRC emacs-lisp
  (defun js/sort-comma (reverse beg end)
    "Take a list of tags one per line, capitalize them, sort them,
     then replace the line breaks with commas."
    (interactive "P\nr")
    (upcase-region beg end)
    (sort-lines reverse beg end)
    (save-excursion
      (save-restriction
        (narrow-to-region beg end)
        (end-of-buffer)
        (beginning-of-line)
        (insert "and ")
        (beginning-of-buffer)
        (while (search-forward "\n" nil t)
          (replace-match ", "))
        )))
#+END_SRC
* window movement
#+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings)
  (setq windmove-wrap-around t)
  (global-set-key (kbd "<f16>") 'other-window)
#+END_SRC
* stripe region or table

#+BEGIN_SRC emacs-lisp
  (defvar js-hi '(:background "dim grey"))

  (defun js/stripe-region (start end)
    "Stripe alternate lines of region."
    (interactive "r")
    (save-excursion
      (goto-char start)
      (while (< (point) end)
        (let ((o (make-overlay (line-beginning-position) (line-end-position))))
          (overlay-put o 'js t)
          (overlay-put o 'face js-hi))
        (forward-line 2))))

  (defun js/stripe-table ()
    "Stripe alternate lines of org-table"
    (interactive)
    (when (org-at-table-p)
      (js/stripe-region (org-table-begin) (org-table-end))))

  (defun js/stripe-remove ()
    "Remove stripes."
    (interactive)
    (remove-overlays nil nil 'js t))
#+END_SRC

* pinned buffer minor mode

Wrapper for easily pinning a buffer to a window.  Found it [[https://github.com/carrete/.emacs.d/blob/master/lisp/setup-pinned-buffer-mode.el][here]].  Still working on window management in emacs.

#+BEGIN_SRC emacs-lisp
  (define-minor-mode pinned-buffer-mode
    "Pin the current buffer to the selected window."
    :lighter nil " P" nil
    (set-window-dedicated-p (selected-window) pinned-buffer-mode))

  (provide 'setup-pinned-buffer-mode)
#+END_SRC

* window management
This reddit [[https://www.reddit.com/r/emacs/comments/24zu2a/how_do_i_stop_emacs_from_taking_over_my_split/][thread]] was helpful.  Elisp [[https://www.gnu.org/software/emacs/manual/html_node/elisp/The-Zen-of-Buffer-Display.html#The-Zen-of-Buffer-Display][manual]] has details.
Another helpful reddit [[https://www.reddit.com/r/emacs/comments/cpdr6m/any_additional_docstutorials_on_displaybuffer_and/][thread]].  Mickey has provided another
great [[https://www.masteringemacs.org/article/demystifying-emacs-window-manager][how-to]].

#+BEGIN_SRC emacs-lisp
  (defun js/split-right-34 ()
    "Splits window right using three quarters of the available space."
    (interactive)
    (split-window-right (floor (* .75 (window-total-width)))))

  (defun js/split-below-34 ()
    "Splits window below using three quarters of the available space."
    (interactive)
    (split-window-below (floor (* .75 (window-total-height)))))

  (defun js/triple ()
    "Splits window into three panes with the middle taking 50%."
    (interactive)
    (delete-other-windows)
    (let ((width (floor (* .25 (frame-width)))))
      (split-window nil width "left" nil)
      (other-window 1)
      (split-window nil (* -1 width) "right" nil)))

  (setq switch-to-buffer-obey-display-actions t)

  (setq display-buffer-alist
        `((,(rx (| "*Ledger Report*"))
           (display-buffer-same-window))
          (,(rx (| "*Occur*" "*Pp Eval Output*" "*Python*"))
           (display-buffer-below-selected))
          (,(rx (| "*compilation*" "*deadgrep" "*info*" "*Help*" "*Apropos*"))
           (display-buffer-in-side-window)
           (side . right)
           (window-width . 80))))
#+END_SRC

* reformatter

[[https://github.com/purcell/reformatter.el][reformatter]] [[http://stable.melpa.org/#/reformatter][MELPA]]

Add a directory local to assign a value to commands.

#+BEGIN_SRC emacs-lisp
  (use-package reformatter
    :ensure t
    :config
    (defcustom black-command nil
      "Path to black executable")
    (reformatter-define black
      :program (if black-command
                   black-command
                 (concat default-directory "env/bin/black"))
      :args '("-"))
    (defcustom sqlformat-command "sqlformat"
      "Path to sqlformat executable")
    (reformatter-define sqlformat
      :program (if sqlformat-command
                   sqlformat-command
                 (concat default-directory "env/bin/sqlformat"))
      :args '("-a" "-k" "upper" "--wrap_after" "80" "-"))
    (reformatter-define ruff
      :program "ruff"
      :args `("format" "--stdin-filename" ,buffer-file-name "-"))
    (reformatter-define ruff-fix
        :program "ruff"
        :args `("check" "--fix-only" "--stdin-filename" ,buffer-file-name "-"))
    (reformatter-define toml
      :program "toml-sort"
      :args '("--spaces-indent-inline-array" "4" "--trailing-comma-inline-array" "-"))
    (reformatter-define prettier
      :program "prettier"
      :args `("--stdin-filepath" ,buffer-file-name))
  )

  (if (executable-find "ruff")
      (add-hook 'python-mode-hook #'ruff-on-save-mode))

  (if (executable-find "toml-sort")
      (add-hook 'conf-toml-mode-hook #'toml-on-save-mode))

  (if (executable-find "prettier")
      (progn
        (add-hook 'css-mode-hook #'prettier-on-save-mode)
        (add-hook 'mhtml-mode-hook #'prettier-on-save-mode)))
#+END_SRC

* compilation

Found [[https://stackoverflow.com/questions/11043004/emacs-compile-buffer-auto-close][this]] Stack Overflow post regarding compilation-finish-functions.  Mickey Peterson has more information about compilation [[https://masteringemacs.org/article/compiling-running-scripts-emacs][here]].

#+BEGIN_SRC emacs-lisp
  (defun js/focus-compile-window (buffer msg)
    (select-window (get-buffer-window buffer)))

  (add-hook 'compilation-finish-functions 'js/focus-compile-window)

  (global-set-key (kbd "C-c r") 'recompile)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ansi-color
    :hook (compilation-filter . ansi-color-compilation-filter))
#+END_SRC

* calc

m m and Z P will clobber this with calc.el (like custom.el).

Thank you [[https://twitter.com/mickeynp/status/1559844040492851200?s=20&t=W4pFrIbRALcaO5IzFsEBhg][Mickey]] for the tip about dedicating the calc window.

#+BEGIN_SRC emacs-lisp
  (setq calc-display-trail nil)
  (setq calc-frac-format '("+/" nil))
  (setq calc-algebraic-mode t)
  (setq calc-make-windows-dedicated t)
  (setq calc-kill-line-numbering nil)

  (defun js/calc-copy-and-remove-plus (arg)
    "Copy the top of the calc stack to the kill ring.  Removes
  fraction plus signs.  If the prefix argument is given, copies ARG
  entries one per line."
    (interactive "P")
    (with-temp-buffer
      (calc-copy-to-buffer arg)
      (js/format-calc-fraction)))


  (defun js/quick-calc-remove-plus ()
    "Launch quick calc and copy result to kill ring without fraction
  plus signs."
    (interactive)
    (with-temp-buffer
      (quick-calc 4)
      (js/format-calc-fraction)))


  (defun js/format-calc-fraction ()
    "Removes fraction plus signs and leading zeros."
    (while (re-search-backward "+" nil t)
      (replace-match " "))
    (goto-char (point-min))
    (if (looking-at-p "0 ")
        (forward-char 2))
    (kill-region (point) (point-max)))

  (defun js/calc-eval (exp)
    "Takes an algebraic expression and returns it with the evaluation."
    (format "%s = %s" exp (calc-eval exp)))

  (global-set-key (kbd "C-c k") 'js/quick-calc-remove-plus)


  (put 'calc-define 'jsfns
       '(progn
          (defmath jsround (n)
            "Round N to the nearest 64th."
            (interactive 1 "jsr")
            (/ (round (* n 64)) 64))
          (define-key calc-mode-map "Ye" 'calc-jsround)
          (define-key calc-mode-map "Yw" 'js/calc-copy-and-remove-plus)
          (setq calc-Y-help-msgs
                (cons "E round to 64th, W copy clean" calc-Y-help-msgs))))

  (run-hooks 'calc-check-defines)
#+END_SRC

* theme

Protesilaos Stavrou has published his accessible [[https://gitlab.com/protesilaos/modus-themes][themes]] on MELPA.  They are on display in his Emacs [[https://www.youtube.com/channel/UC0uTPqBCFIpZxlz_Lv1tk_g][videos]].

#+BEGIN_SRC emacs-lisp
  (use-package modus-themes
    :ensure t
    :init
    (setq modus-themes-common-palette-overrides
          '((bg-mode-line-active bg-blue)
            (fg-mode-line-active fg-main)
            (border-mode-line-active blue-intense)
            (bg-region bg-magenta-intense)
            (fg-region fg-main)
            (bg-paren-expression bg-cyan-intense)
            (bg-paren-match bg-cyan-intense)))
    :config
    (load-theme 'modus-vivendi :no-confirm))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ef-themes
    :ensure t
    :init
    (setq ef-themes-to-toggle '(ef-owl ef-eagle))
    (setq ef-themes-region '(intense))

    (defun js/ef-themes ()
    "Theme overrides."
    (ef-themes-with-colors
      (custom-set-faces
       `(org-block ((,c :background ,bg-main)))
       `(org-block-begin-line ((,c :background ,bg-main)))
       `(org-block-end-line ((,c :background ,bg-main))))))

    (add-hook 'ef-themes-post-load-hook #'js/ef-themes))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun js/disable-themes ()
    (interactive)
    (mapc #'disable-theme custom-enabled-themes))
#+END_SRC

[[https://github.com/morhetz/gruvbox][gruvbox]] [[https://github.com/greduan/emacs-theme-gruvbox][theme]].

#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
    :ensure t)
#+END_SRC

* elfeed

[[https://github.com/skeeto/elfeed][elfeed]] [[https://melpa.org/#/elfeed][MELPA]]

#+BEGIN_SRC emacs-lisp
    (use-package elfeed
      :ensure t
      :config
      (defface blog-elfeed-entry
        '((t :foreground "#70b900"))
        "Indicates a blog entry.")

      (push '(blog blog-elfeed-entry)
            elfeed-search-face-alist))
#+END_SRC

[[https://github.com/remyhonig/elfeed-org][elfeed-org]] [[https://melpa.org/#/elfeed-org][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package elfeed-org
    :ensure t
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/org/elfeed.org")))
#+END_SRC

* stop emacs from exiting with a clock running
#+BEGIN_SRC emacs-lisp
  (add-hook 'kill-emacs-query-functions
            (lambda ()
              (if (and (fboundp 'org-clocking-p)
                       (org-clocking-p))
                  (progn (message "clocked-in")
                         nil)
                t)))
#+END_SRC

* build a SQL IN clause from lines of text
#+BEGIN_SRC emacs-lisp
    (defun js/build-in-clause ()
      "Creates a SQL IN clause from each line in a buffer and adds it to kill ring."
      (beginning-of-buffer)
      (while (re-search-forward "^\\(.+\\)$" nil t)
        (replace-match "'\\1'," nil nil))
      (delete-backward-char 1)
      (insert ")")
      (beginning-of-buffer)
      (insert "IN\n(")
      (end-of-buffer)
      (copy-region-as-kill (point-min) (point-max)))

    (defun js/in-clause-builder (beg end)
      "Creates a SQL IN clause from the active region one item per line and adds the IN clause
  to the kill ring.  If there is no active region, the entire buffer is used."
      (interactive "r")
      (if (use-region-p)
          (progn
            (copy-region-as-kill beg end)
            (with-temp-buffer
              (yank)
              (js/build-in-clause)))
        (js/build-in-clause)))
#+END_SRC

* winner mode
#+BEGIN_SRC emacs-lisp
(winner-mode)
#+END_SRC

* GPG

EPG tells gpg agent pinentry is loopback, gpg-agent returns responsibility
for passphrase back to EPG.  EPG prompts at the minibuffer.

#+BEGIN_SRC emacs-lisp
(setq epg-pinentry-mode 'loopback)
#+END_SRC

* sql

Using the [[https://github.com/sebasmonia/sqlcmdline][sqlcmdline]] package to connect to SQL.  The regexp add to the sql-product-alist is not required in Emacs 27.
Updated default rows variable inside sqlcmdline to 0 and added :t :c less verbose tables and cols functions there also.

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'sql
    (plist-put (alist-get 'ms sql-product-alist) :prompt-cont-regexp "^[0-9]*>")
    (setq sql-ms-options nil)
    (setq sql-ms-program "sqlc")

    (add-hook 'sql-interactive-mode-hook
              (lambda ()
                (setq truncate-lines t))))
#+END_SRC

* optional local packages

Thank you to [[https://github.com/purcell/emacs.d/blob/master/lisp/init-elpa.el][Steve Purcell]] for maybe-require function.

#+BEGIN_SRC emacs-lisp
  (defun maybe-require (feature)
    "Try to install PACKAGE, and return non-nil if successful.
  In the event of failure, return nil and print a warning message."
    (condition-case err
        (require feature)
      (error
       (let ((inhibit-message t))
         (message "Couldn't install optional feature `%s': %S" feature err))
       nil)))

  (maybe-require 'minicad)
  (maybe-require 'internal-site)
  (maybe-require 'job-dired)
#+END_SRC

* web searches from emacs
#+BEGIN_SRC emacs-lisp
  (defun js/webjump (arg)
    "Wrap webjump to use eww if ARG."
    (interactive "P")
    (let ((webjump-use-internal-browser arg))
      (webjump)))

  (global-set-key (kbd "C-c s") #'js/webjump)
  (setq webjump-sites
        '(("Kagi" . [simple-query
                     "https://kagi.com"
                     "https://kagi.com/search?q="
                     ""])
          ("Pypi" . [simple-query
                     "https://pypi.org"
                     "https://pypi.org/search/?q="
                     ""])
          ("Wikipedia" . [simple-query
                          "wikipedia.org"
                          "wikipedia.org/wiki/"
                          ""])))
#+END_SRC

* dumb-jump
[[https://github.com/jacktasia/dumb-jump][web]] [[https://melpa.org/#/dumb-jump][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :config
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+END_SRC

* deadgrep
[[https://github.com/Wilfred/deadgrep][web]] [[https://melpa.org/#/deadgrep][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package deadgrep
    :ensure t)
#+END_SRC

* training helpers

[[https://en.wikipedia.org/wiki/One-repetition_maximum][Wikipedia: One-repetition maximum]]

#+BEGIN_SRC emacs-lisp
  (defvar barbell-bar-weight 20
    "Weight in kilograms of barbell.")
  (defvar barbell-plate-inventory '(25 20 15 10 5 2.5 1)
    "Inventory of plates in kilograms.  Assumes plates as pairs.")

  (defun barbell--load (load)
    "Generate a list of plates from the given LOAD."
    (let ((load (- load barbell-bar-weight))
          (available (sort barbell-plate-inventory '>))
          (result))
      (if (= 0
             (dolist (current available load)
               (when (>= load (* 2 current))
                 (setq load (- load (* 2 current)))
                 (setq result (cons current result)))))
          (reverse result)
        (user-error "%s" "Impossible load"))))


  (defun barbell-load (load-string)
    "Convert LOAD-STRING to the representation of the plates on the bar."
    (interactive (let ((number-at-point (thing-at-point 'number)))
                   (list (read-string "Load: "
                                      (when number-at-point
                                        (number-to-string number-at-point))))))
    (let* ((load (string-to-number load-string))
           (result (barbell--load load)))
      (message (format "%s kg (%d lbs) %s" load (* 2.2 load)
                       (if result
                           (seq-reduce (lambda (x y)
                                         (format "%s--%s" x y))
                                       result "")
                         "--")))))

  (defun barbell-compute-1RM (weight reps)
    "Compute the one rep maximum for WEIGHT and REPS using the Epley formula."
    (interactive "nWeight: \nnReps: ")
    (message "%s" (+ (* weight reps 0.0333) weight)))

  (defun barbell-reps-to-1RM (target weight)
    (interactive "nTarget: \nnWeight: ")
    (message "%s" (ceiling (/ (- (1+ target) weight) (* 0.0333 weight)))))
#+END_SRC

* git interface

[[https://github.com/magit/magit][magit]] [[https://melpa.org/#/magit][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC

* ledger

[[https://github.com/ledger/ledger-mode][ledger-mode]] [[https://melpa.org/#/ledger-mode][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :ensure t
    :config
    (add-hook 'ledger-mode-hook
              (lambda ()
                (setq-local tab-always-indent 'complete)
                (setq-local completion-cycle-threshold t)
                (setq-local ledger-complete-in-steps t)))
    (setq ledger-default-date-format ledger-iso-date-format))
#+END_SRC

* hippie expand

Xah Lee has a [[http://xahlee.info/linux/linux_xmodmap_tutorial.html][tutorial]] on using the higher function keys in Linux.  More information can be found on the [[https://wiki.archlinux.org/index.php/Xmodmap][Arch Wiki]].

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f17>") 'hippie-expand)
#+END_SRC

* package lint

[[https://github.com/purcell/package-lint][package-lint]] [[https://melpa.org/#/package-lint][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package package-lint
    :ensure t)
#+END_SRC

* launch work setup

Run ispell last

#+BEGIN_SRC emacs-lisp
  (defun js/scroll-to-bottom (&optional e)
      (let ((this-scroll-margin
             (min (max 0 scroll-margin)
                  (truncate (/ (window-body-height) 4.0)))))
        (recenter (- -1 this-scroll-margin) t)))

  (defun js/capture-note-locate-point ()
    (interactive)
    (goto-char (point-min))
    (goto-char (search-forward "* Notes")))

  (defun js/capture-note-finding ()
    (let* ((dir-job-files "c:/Users/justin/Dropbox/Documents/job files/")
           (job-number (get-register ?J))
           (file-name (expand-file-name (concat job-number "/" job-number ".org") dir-job-files)))
      (set-buffer (org-capture-target-buffer file-name))
      (js/capture-note-locate-point)))

  (defun js/break-jobs (beg end)
    "Convert all job numbers from BEG to END into query form."
    (interactive "r")
    (save-excursion
      (save-restriction
        (narrow-to-region beg end)
        (goto-char (point-min))
        (while (re-search-forward "\\(.*\\)\\.\\(.*\\)\\.\\(.*\\)" nil t nil)
          (replace-match "(b.job = '\\1' and b.release = '\\2' and b.book = '\\3') or" nil nil nil nil)))))

  (defun js/vale (beg end)
    (interactive "r")
    (shell-command-on-region beg end "my_vale.bat"))

  (require 'dired-x)

  (defun js/omit-desktop-ini ()
    (interactive)
    (with-current-buffer (find-file-noselect "c:/Users/justin/Desktop")
      (setq-local dired-omit-files "desktop\\.ini")
      (setq-local dired-omit-verbose nil)
      (dired-omit-mode 1)))

    (defun js/go-to-work ()
      (interactive)
      (desktop-read)
      (modus-themes-toggle)
      (js/omit-desktop-ini)
      (find-file-noselect "~/org/checklist.org")
      (eshell)
      (calc)
      (sql-connect "engineering")
      (sql-connect "customer_service")
      (maybe-require 'js-email)
      (require 'org-agenda)
      (add-to-list 'org-agenda-custom-commands
                   '("x" "Agenda grouped by priority"
                     ((agenda ""
                              ((org-agenda-skip-function
                                '(org-agenda-skip-entry-if 'notregexp "\\[#A]"))
                               (org-agenda-overriding-header "Daily")))
                      (agenda ""
                              ((org-agenda-skip-function
                                '(org-agenda-skip-entry-if 'notregexp "\\[#B]"))
                               (org-agenda-overriding-header "Weekly")))
                      (agenda ""
                              ((org-agenda-skip-function
                                '(org-agenda-skip-entry-if 'notregexp "\\[#C]"))
                               (org-agenda-overriding-header "Quarterly")))
                      (agenda ""
                              ((org-agenda-skip-function
                                '(org-agenda-skip-entry-if 'regexp "\\[#A]\\|\\[#B]\\|\\[#C]"))))
                      (todo "BLOCKED" ((org-agenda-overriding-header "Blocked"))))))
      (add-to-list 'org-agenda-custom-commands
                   '("y" "notes TODO" todo "TODO"
                      ((org-agenda-files '("~/org/notes.org"))
                       (org-agenda-overriding-header "Notes TODO"))))
      (add-to-list 'org-agenda-custom-commands
               '("q" "lean" tags
                 "TODO=\"DONE\"&CLOSED>\"<-14d>\"-exclude|TODO=\"TODO\"&SCHEDULED>\"<-10y>\"-exclude"
                 ((org-agenda-files '("~/org/notes.org"))
                  (org-agenda-sorting-strategy '(todo-state-down scheduled-up))
                  (org-agenda-prefix-format "%i            "))))
      (global-set-key (kbd "C-c a") (lambda () (interactive) (org-agenda "" "x")))
      (advice-add 'org-agenda-redo-all :after #'js/scroll-to-bottom)
      (setq org-latex-packages-alist '("\\usepackage{kpfonts}"
                                       "\\usepackage{parskip}"
                                       "\\usepackage[left=1in]{geometry}"
                                       "\\hypersetup{colorlinks}"))
      (global-set-key (kbd "<f7>") #'js/insert-book-week)
      (add-to-list 'org-capture-templates
                   '("j" "note" plain (function js/capture-note-finding) "\n** %U\n+ %?" :jump-to-captured t :empty-lines-after 1)
                   t)
      (add-to-list 'webjump-sites
                   ;; http://nitrogen/job/13314.R0.F0
                   '("Job" . [simple-query
                              "http://nitrogen/job_hub"
                              "http://nitrogen/job/"
                              ""]))
      (setq org-tags-exclude-from-inheritance '("strategic"))
      (setq org-deadline-warning-days 121)
      (ispell))

  (defvar js/coding-p nil)
  (defun js/toggle-coding ()
    (interactive)
    (if (not js/coding-p)
        (progn
          (setq js/coding-p t)
          (js/change-face-height 180)
          (if (member "Essential PragmataPro" (font-family-list))
           (set-face-attribute 'default nil :font "Essential PragmataPro")))
      (js/change-face-height js/default-font-height))
    (calc)
    (ispell))

    (defun js/desktop-to-job ()
      (interactive)
      (let ((full-job (get-register ?j)))
        (unless (null full-job)
          (let* ((job-number (car (split-string full-job "[.]")))
                 (job-folder (expand-file-name job-number "c:/Users/justin/Dropbox/Documents/job files")))
            (when (file-exists-p job-folder)
              (delete-other-windows)
              (split-window-below)
              (find-file "c:/Users/justin/Desktop")
              (find-file-other-window job-folder)
              (other-window 1))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun js/go-six ()
    "Launch laptop."
    (interactive)
    (desktop-read)
    (load-theme 'gruvbox-dark-hard)
    (set-face-attribute 'default nil :font "JetBrains Mono NL")
    (setq browse-url-browser-function 'browse-url-generic
          browse-url-generic-program "qutebrowser"))
#+END_SRC

* permanently delete from dired

#+BEGIN_SRC emacs-lisp
  (defun js-dired-do-destroy (ARG)
      "Permanently delete all marked (or next ARG) files."
      (interactive "P")
      (let ((trash delete-by-moving-to-trash))
        (setq delete-by-moving-to-trash nil)
        (dired-do-delete ARG)
        (setq delete-by-moving-to-trash trash)))

  (add-hook 'dired-mode-hook
            (lambda ()(define-key dired-mode-map (kbd "C-d")
                        'js-dired-do-destroy)))
#+END_SRC

* outline navigation

#+BEGIN_SRC emacs-lisp
  (defun js/outline ()
    "Dispatch `org-goto' or `imenu'."
    (interactive)
    (if (equal major-mode 'org-mode)
        (org-goto)
      (imenu (imenu-choose-buffer-index))))
  (global-set-key (kbd "C-c j") 'js/outline)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun js/outline-toggle-children ()
    "Show or hide the current subtree depending on its current state."
    (interactive)
    (save-excursion
      (outline-back-to-heading)
      (if (not (outline-invisible-p (line-end-position)))
          (outline-hide-subtree)
        (outline-show-subtree))))

  (defun js/outline-cycle-buffer (&optional level)
    "Cycle visibility state of the body lines of the whole buffer.

  This cycles the visibility of all the subheadings and bodies of all
  the heading lines in the buffer.  It cycles them between `hide all',
  and `show all'.

  `Hide all' means hide all the buffer's subheadings and their bodies.
  `Show all' means show all the buffer's subheadings and their bodies.

  With a prefix argument, show headings up to that LEVEL."
    (interactive (list (when current-prefix-arg
                         (prefix-numeric-value current-prefix-arg))))
    (let (top-level)
      (save-excursion
        (goto-char (point-min))
        (while (not (or (eq top-level 1) (eobp)))
          (when-let ((level (and (outline-on-heading-p t)
                                 (funcall outline-level))))
            (when (< level (or top-level most-positive-fixnum))
              (setq top-level (max level 1))))
          (outline-next-heading)))
      (cond
       (level
        (outline-hide-sublevels level)
        (setq outline--cycle-buffer-state 'all-heading)
        (message "All headings up to level %s" level))
       ((and (eq outline--cycle-buffer-state 'show-all)
             top-level)
        (outline-hide-sublevels top-level)
        (setq outline--cycle-buffer-state 'top-level)
        (message "Top level headings"))
       (t
        (outline-show-all)
        (setq outline--cycle-buffer-state 'show-all)
        (message "Show all")))))

  (define-key outline-minor-mode-map (kbd "<f7>") #'js/outline-toggle-children)
  (define-key outline-minor-mode-map (kbd "<f8>") #'js/outline-cycle-buffer)

  (add-hook 'python-mode-hook #'outline-minor-mode)
#+END_SRC

* graphviz

[[https://graphviz.org/][Graphviz]]

[[https://github.com/ppareit/graphviz-dot-mode][web]] [[https://melpa.org/#/graphviz-dot-mode][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package graphviz-dot-mode
    :ensure t
    :config
    (setq graphviz-dot-indent-width 4))
#+END_SRC
* dired auto-revert
Found a solution [[https://gist.github.com/samwhitlock/c4f0dd94a7c38c922c390c95ad249583\]\]][here.]]  Relevant Emacs [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Non_002dFile-Buffers.html][manual]] and Stack Overflow [[https://emacs.stackexchange.com/questions/29228/how-to-stop-dired-printing-reverting-buffer][post.]]
#+BEGIN_SRC emacs-lisp
(defun quiet-auto-revert ()
  "A hook to run for buffers you want to revert automatically and silently"
  (auto-revert-mode 1)
  (setq-local auto-revert-verbose nil))

(add-hook 'dired-mode-hook #'quiet-auto-revert t nil)
#+END_SRC
* superword-mode
#+BEGIN_SRC emacs-lisp
  (use-package subword
    :diminish superword-mode)
#+END_SRC
* expansions
#+BEGIN_SRC emacs-lisp
  (defun js/list-expansions ()
    "List all tempos, skeletons, and active abbrevs."
    (interactive)
    (pop-to-buffer "*Expansions*")
    (setq buffer-read-only nil)
    (erase-buffer)

    (insert "(tempos)\n\n")
    (dolist (tag tempo-tags)
      (let ((trigger (car tag))
            (doc (documentation (cdr tag))))
        (insert (format "%s=    %s\n" trigger doc))))
    (insert "\n\n")

    (insert "(skeletons)\n\n")
    (dolist (tag js/skeletons)
      (let ((trigger (car tag))
            (doc (cdr tag)))
        (insert (format "%s=    %s\n" trigger doc))))
    (insert "\n\n")

    ;; lifted from prepare-abbrev-list-buffer in abbrev.el
    (dolist (table abbrev-table-name-list)
      (unless (abbrev-table-empty-p (symbol-value table))
        (insert-abbrev-table-description table t)))

    (goto-char (point-min))
    (while (re-search-forward "[0123456789]* \"\"\\s-*" nil t)
      (replace-match "=    " nil nil))
    (align-regexp (point-min) (point-max) "\\(\\s-*\\)=")
    (special-mode))

  (defvar js/skeletons nil
    "An association list of skeleton names and docstrings.")

  (defun js/add-skeleton-to-table (command documentation &rest skeleton)
    "Add skeleton to table when define-skeleton is called."
    (add-to-list 'js/skeletons (cons (symbol-name command) documentation)))

  (advice-add #'define-skeleton :before #'js/add-skeleton-to-table)
#+END_SRC
* skeletons
#+BEGIN_SRC emacs-lisp
  (defvar js/insert-book-week-date nil
    "Last used date for insert book_week.")

  (defvar js/insert-book-week-month nil
    "Last used month for insert book_week.")

  (define-skeleton js/insert-book-week
    "Insert book_week row."
    nil
    "Insert into book_weeks (job, release, book, week_friday, expected_ship_month) values ('"
    '(setq v1 (split-string (skeleton-read "JOB> ") "[.]"))
    (upcase (car v1))
    "', '"
    (upcase (cadr v1))
    "', '"
    (upcase (caddr v1))
    "', '"
    '(setq v2 (skeleton-read "Friday> " js/insert-book-week-date))
    '(setq js/insert-book-week-date v2)
    v2
    "', '"
    '(setq v2 (skeleton-read "Month> " js/insert-book-week-month))
    '(setq js/insert-book-week-month v2)
    v2
    "');;")

#+END_SRC
* tempo
#+BEGIN_SRC emacs-lisp
  (require 'tempo)
  (setq tempo-interactive t)
  (global-set-key (kbd "<f6>") #'tempo-complete-tag)
#+END_SRC
** new source block
#+BEGIN_SRC emacs-lisp
  (tempo-define-template "jjE"
                         '("#+BEGIN_SRC "
                           (completing-read "Language: " '(emacs-lisp python shell))
                           p
                           n
                           "#+END_SRC")
                         "jjE"
                         "Adds a source block in org mode.")

  (define-abbrev org-mode-abbrev-table "jjE" "" 'tempo-template-jjE :system t)
#+END_SRC
** html boilerplate
Inspiration and ideas from [[https://protesilaos.com/emacs/modus-themes-colors][modus-themes]], [[http://bettermotherfuckingwebsite.com/][this]] website, and [[https://brutalist-web.design/][this]] website.

#+NAME: chunk-1
#+BEGIN_EXAMPLE
  <!DOCTYPE html>
  <html lang="en-US">
    <head>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <title>
#+END_EXAMPLE

#+NAME: chunk-2
#+BEGIN_EXAMPLE
  </title>
      <style>
        ,* {
            box-sizing: border-box;
            margin: 0px;
            padding: 0px;
        }
      </style>
      <style>
        body {
            margin: 40px auto;
            max-width: 650px;
            line-height: 1.6;
            font-size: 18px;
            background-color: #ffffff;
            color: #000000;
            padding: 0 10px
        }
        h1, h2, h3 {
            line-height: 1.2
        }
      </style>
    </head>
    <body>
#+END_EXAMPLE

#+NAME: chunk-3
#+BEGIN_EXAMPLE
      <script>

      </script>
    </body>
  </html>
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp :var chunk-1=chunk-1 chunk-2=chunk-2 chunk-3=chunk-3
  (tempo-define-template "jjhtml"
                         `(,chunk-1 (p "Title: ") ,chunk-2 p ,chunk-3)
                         "jjhtml"
                         "Starts a new html file.")
#+END_SRC
** jinja
#+BEGIN_SRC emacs-lisp
  (tempo-define-template "jjjfor"
                         '("{% for "
                           (p "Variable: ")
                           " in "
                           (p "Container: ")
                           " %}"
                           n
                           p
                           n
                           "{% endfor %}")
                         "jjjfor"
                         "Jinja for loop")

  (tempo-define-template "jjjife"
                         '("{% if "
                           (p "Test: ")
                           " %}"
                           n
                           p
                           n
                           "{% else %}"
                           n
                           "{% endif %}")
                         "jjjife"
                         "Jinja if else")

  (tempo-define-template "jjjif"
                         '("{% if "
                           (p "Test: ")
                           " %}"
                           n
                           p
                           n
                           "{% endif %}")
                         "jjjif"
                         "Jinja if")

  (tempo-define-template "jjjv"
                         '("{{ "
                           (p "Variable: ")
                           " }}")
                         "jjjv"
                         "Jinja variable")

#+END_SRC
** pytest
#+BEGIN_SRC emacs-lisp
  (tempo-define-template "jjtest"
                         '((p "Name: " name 'noinsert)
                           (p "Vars: " vars 'noinsert)
                           "@pytest.mark.parametrize(\""
                           (replace-regexp-in-string " +" "" (tempo-lookup-named 'vars))
                           "\", [(),])\n"
                           "def test_"
                           (s name)
                           "("
                           (s vars)
                           "):"
                           n>)        ; elements here
                         "jjtest"
                         "Generates a parameterized test.")
#+END_SRC
* ediff
#+BEGIN_SRC emacs-lisp
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC
* python
#+BEGIN_SRC emacs-lisp
  (setq python-shell-interpreter "python")
#+END_SRC
* scanner
#+BEGIN_SRC emacs-lisp
  (defun js/scan ()
    "Run shell script to mount drive, move images, and open dired."
    (interactive)
    (shell-command-to-string "scanner.sh")
    (message "convert * filename.pdf")
    (dired "~/scans"))
#+END_SRC
* display time in mode line
#+BEGIN_SRC emacs-lisp
  (setq display-time-day-and-date t)
  (setq display-time-default-load-average nil)
  (display-time-mode 1)
#+END_SRC
* auto commit of org mode files
See this [[https://superuser.com/a/132409][SO]] answer.  Use [[file:org-dir-locals.el][this]] .dir-locals.el file in the target directory.
#+BEGIN_SRC emacs-lisp
  (defun js/commit-on-save ()
    (shell-command-to-string "git commit -am \"auto commit\""))
#+END_SRC
* abbrev
#+BEGIN_SRC emacs-lisp
  (use-package abbrev
    :init
    (setq-default abbrev-mode 1)
    :diminish abbrev-mode)
#+END_SRC
* denote

[[https://protesilaos.com/emacs/denote][Denote]] [[https://elpa.gnu.org/packages/denote.html][ELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package denote
    :if (>= emacs-major-version 28)
    :ensure t
    :config
    (setq denote-directory (expand-file-name "~/org/denotes/"))
    (setq denote-allow-multi-word-keywords nil)
    (setq denote-dired-directories (list denote-directory))
    (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories))
#+END_SRC
* mount disk
#+BEGIN_SRC emacs-lisp
  (defun js/mount-ledger ()
    (interactive)
    (let ((pass (read-passwd "Decrypt> ")))
      (shell-command-to-string (format "echo %s | mount_ledger.sh" pass))))

  (defun js/umount-ledger ()
    (interactive)
    (shell-command-to-string "umount_ledger.sh"))
#+END_SRC
* repeat mode
Thanks to Karthinks [[https://karthinks.com/software/it-bears-repeating/][blog]].
#+BEGIN_SRC emacs-lisp
  (repeat-mode 1)
#+END_SRC
* eshell
#+BEGIN_SRC emacs-lisp
  (defvar eshell-venv-prompt ""
    "Prefix for eshell prompt, typically Python venv.")

  (defun js/eshell-prompt ()
    "Generate eshell prompt."
    (concat (propertize eshell-venv-prompt 'face '(:foreground "violet"))
            (abbreviate-file-name (eshell/pwd))
            (if (= (user-uid) 0) " # " " $ ")))

  (setq eshell-prompt-function 'js/eshell-prompt)

  (setq eshell-visual-subcommands '(("git" "log" "diff" "show" "glog" "dft" "dlog")))

  (defun js/dft ()
    "Run git dft through eshell."
    (interactive)
    (eshell-command "git dft"))
#+END_SRC
* minibuffer completion
Prompted by [[https://www.masteringemacs.org/article/understanding-minibuffer-completion][Mickey]], now enjoying the default completion system.
#+BEGIN_SRC emacs-lisp
  (setq completion-styles '(basic partial-completion emacs22 substring))
  (setq completion-cycle-threshold 3)
  (setq completions-detailed t)
  (setq read-buffer-completion-ignore-case t)
  (setq read-file-name-completion-ignore-case t)
  (setq confirm-nonexistent-file-or-buffer t)
#+END_SRC
* paren managment
#+BEGIN_SRC emacs-lisp
  (defun js/inhibit-quote ()
    (setq-local electric-pair-inhibit-predicate
                `(lambda (c)
                   (if (char-equal c ?\")
                       t
                     (,electric-pair-inhibit-predicate c)))))

  (defun js/inhibit-quote-message-mode ()
    (setq-local electric-pair-pairs nil))

  (electric-pair-mode 1)
  (show-paren-mode 1)
  (setq show-paren-style 'mixed)
  (setq show-paren-context-when-offscreen t)
  (add-hook 'org-mode-hook #'js/inhibit-quote)
  (add-hook 'message-mode-hook #'js/inhibit-quote-message-mode)
#+END_SRC
* benchmark
See [[https://www.emacswiki.org/emacs/EmacsLispBenchmark][EmacsWiki]].
#+BEGIN_SRC emacs-lisp
  (defun js/benchmark ()
    "Run a sorting benchmark for basic comparisons."
    (interactive)
    (let ((result (car (benchmark-run 256
                         (sort (number-sequence 1 1048576) #'<)))))
      (message (format "Elapsed time: %fs" result))))
#+END_SRC
* python-up-list
#+BEGIN_SRC emacs-lisp
  (defun js/python-backward-up-list (&optional arg)
    "Move backward out of one level of parentheses, strings, or blocks.
  With ARG, do this that many times.
  A negative argument means move forward but still to a less deep spot."
    (interactive "^p")
    (let ((context (python-syntax-context-type)))
      (if (memq context '(string comment))
          (backward-up-list arg t t)
        (python-nav-backward-up-list arg))))

  (define-key python-mode-map [remap backward-up-list] #'js/python-backward-up-list)
#+END_SRC
* movie database
#+BEGIN_SRC emacs-lisp
    (defun js/movie (url)
      "Adds a Wikipedia URL to the database and displays the database.
    An empty URL only displays the database."
      (interactive "sURL: ")
      (let* ((exe (concat "cd ~/Dropbox/progs/movie-db; "
                          "~/Dropbox/progs/movie-db/env/bin/python -m movie_db "))
             (add-result (if (not (string= url ""))
                             (shell-command-to-string
                              (concat exe "add " (shell-quote-argument url)))
                           "")))
        (pop-to-buffer "*Movies*")
        (setq buffer-read-only nil)
        (erase-buffer)
        (if (string= add-result "")
            (insert
             (shell-command-to-string
              (concat exe "view")))
          (insert add-result))
        (special-mode)
        (goto-address-mode 1)))
#+END_SRC
* goto address mode
#+BEGIN_SRC emacs-lisp
  (setq goto-address-highlight-keymap
        (let ((m (make-sparse-keymap)))
          (define-key m (kbd "C-c C-o") #'goto-address-at-point)
          (define-key m (kbd "<mouse-2>") #'goto-address-at-point)
          (define-key m (kbd "C-c RET") #'goto-address-at-point)
          m))
#+END_SRC
* backward mark sexp
#+BEGIN_SRC emacs-lisp
  (defun js/negate-raw-prefix (arg)
    "Negate raw prefix ARG."

    ;; (= (prefix-numeric-value 43) (- (prefix-numeric-value (js/negate-raw-prefix 43))))
    ;; (= (prefix-numeric-value '-) (- (prefix-numeric-value (js/negate-raw-prefix '-))))
    ;; (= (prefix-numeric-value '(4)) (- (prefix-numeric-value (js/negate-raw-prefix '(4)))))
    ;; (= (prefix-numeric-value nil) (- (prefix-numeric-value (js/negate-raw-prefix nil))))

    (cond ((integerp arg) (- arg))
          ((eq arg '-) nil)
          ((consp arg) (- (car arg)))
          (t '-)))


  (defun js/backward-mark-sexp (&optional arg allow-extend)
    "Apply `mark-sexp' with negated ARG."
    (interactive "P\np")
    (mark-sexp (js/negate-raw-prefix arg)
               allow-extend))

  (global-set-key (kbd "C-M-;") #'js/backward-mark-sexp)
#+END_SRC
* dired rename
[[https://sachachua.com/blog/2023/10/emacsconf-backstage-file-prefixes/][Sacha Chua]]
[[https://www.emacs.dyerdwelling.family/emacs/20231013153639-emacs--more-flexible-duplicate-thing-function/][James Dyer]]
[[https://stackoverflow.com/questions/384284/how-do-i-rename-an-open-file-in-emacs][stack overflow]]
#+BEGIN_SRC emacs-lisp
  (defun js/dired-rename--rename (filename)
    "Rename FILENAME using format iso_job_project.ext."
    (let* ((file (file-name-base filename))
           (dir (file-name-directory filename))
           (ext (or (file-name-extension filename) ""))
           (today (format-time-string "%Y-%m-%d"))
           (job (or (get-register ?J) ""))
           (job-or-project (read-string (format "Project (%s): " job) nil nil job))
           (job-text (if (not (string-empty-p job-or-project)) (concat job-or-project "_") ""))
           (date (read-string (format "Date (%s): " today) nil nil today))
           (comment (read-string (format "Comment (%s): " file) nil nil file))
           (new-filename (concat dir date "_" job-text comment "." ext)))
      (rename-file filename new-filename 1)
      (message "File renamed to %s" new-filename)))


  (defun js/dired-rename-job-file()
    "Rename marked files in dired."
    (interactive)
    (mapcar #'js/dired-rename--rename (dired-get-marked-files))
    (revert-buffer))
#+END_SRC
* yaml

[[https://yaml.org/][yaml]]

[[https://github.com/yoshiki/yaml-mode][web]] [[https://melpa.org/#/yaml-mode][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+END_SRC
* debbugs

[[https://elpa.gnu.org/packages/doc/debbugs-ug.html][web]]

#+BEGIN_SRC emacs-lisp
  (use-package debbugs
    :ensure t)
#+END_SRC
* fd

[[https://github.com/sharkdp/fd][fd]] is a fast finder.  [[https://www.masteringemacs.org/article/working-multiple-files-dired][Mickey]] provides an excellent overview of the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired-and-Find.html][find-dired]] package.

#+BEGIN_SRC emacs-lisp
  (defalias 'fd 'find-lisp-find-dired)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'find-dired)
  (defun js/fd-dired (dir pattern)
    "Run `fd' with glob PATTERN in DIR and output in Dired buffer \"*Find*\".

  Uses `find-dired-with-command'."
    (interactive
     (list (read-directory-name "Run find in directory: " nil "" t)
           (read-string "Filename (regex):  ")))
    (let ((command (concat "fd '" pattern "' -X ls " (cdr find-ls-option))))
      (find-dired-with-command dir command)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun js/fd-tree (dir pattern)
    "Run `fd' with glob PATTERN in DIR and output using `tree'."
    (interactive
     (list (read-directory-name "Run find in directory: " nil "" t)
           (read-string "Filename (regex):  ")))
    (let ((command (concat "fd '" pattern  "' | tree --fromfile"))
          (default-directory dir))
      (shell-command command)))
#+END_SRC
* scroll without moving point
[[https://stackoverflow.com/questions/8993183/emacs-scroll-buffer-not-point][Stack Overflow]] [[https://www.emacswiki.org/emacs/Scrolling][EmacsWiki]]
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-n") (lambda () (interactive) (scroll-down-line)))
(global-set-key (kbd "M-p") (lambda () (interactive) (scroll-up-line)))
#+END_SRC
* launch machine specific config
#+BEGIN_SRC emacs-lisp
  (cond ((string= (system-name) "six")
         (js/go-six)))
#+END_SRC
