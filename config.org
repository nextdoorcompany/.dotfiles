* version

#+BEGIN_SRC emacs-lisp
  (defun js/version ()
    "Provides the version number of the init file."
    (interactive)
    (message "init version 35"))
#+END_SRC

* thank you

+ [[https://www.gnu.org/software/emacs/manual/][The Manual]]
+ [[https://github.com/howardabrams/dot-files/blob/master/emacs.org][Howard Abrams]]
+ [[https://github.com/Wilfred/.emacs.d/blob/gh-pages/init.org][Wilfred Hughes]]
+ [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org][Harry Schwartz]]
+ [[https://github.com/zamansky/using-emacs/blob/master/myinit.org][Mike Zamansky]]
+ [[https://www.masteringemacs.org/][Mickey Petersen]]
+ [[https://github.com/purcell][Steve Purcell]]
+ [[https://sachachua.com/blog/][Sacha Chua]]

* external dependencies

The system must have the programs below.  Also see the paths section for required files.

+ [[http://aspell.net/][aspell]]
+ [[https://ftp.gnu.org/gnu/aspell/dict/en/][aspell-en]]
+ [[https://github.com/BurntSushi/ripgrep][ripgrep]]
+ [[https://www.ghostscript.com/][ghostscript]]
+ [[https://git-scm.com/][git]]
+ [[http://tug.org/texlive/][texlive]] or [[https://miktex.org/][miktex]]
+ [[https://www.gnu.org/software/diffutils/][diff]]
+ [[https://www.ledger-cli.org/][ledger]]

These are optional programs.  Sqlformat and black are assumed to be in the project's
virtualenv.

+ [[https://www.python.org/][python]]
+ [[https://github.com/andialbrecht/sqlparse][sqlformat]]
+ [[https://github.com/psf/black][black]]
+ [[https://graphviz.org/][dot]]

#+BEGIN_SRC emacs-lisp
  (let ((programs '("aspell" "rg" "gs" "git" "pdflatex" "pdftotext" "diff" "ledger" "dot")))
    (dolist (prog programs)
      (when (not (executable-find prog))
        (let ((inhibit-message t))
          (message "Program %s not found" prog)))))
#+END_SRC

* package repositories

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives
        '(("gnu" . "https://elpa.gnu.org/packages/")
          ("melpa" . "https://melpa.org/packages/")))
#+END_SRC


* bootstrap package manager

[[https://github.com/jwiegley/use-package][use-package]] [[https://melpa.org/#/use-package][MELPA]]

#+BEGIN_SRC emacs-lisp
  (unless package--initialized
    (package-initialize))
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
#+END_SRC


* hide unwanted mode information from mode line

[[https://github.com/myrjola/diminish.el][diminish]] [[https://melpa.org/#/diminish][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    )
#+END_SRC

* general

#+BEGIN_SRC emacs-lisp
  (setq visible-bell t)
  (setq confirm-kill-emacs #'y-or-n-p)
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message nil)
  (setq visual-line-fringe-indicators t)
  (setq scroll-conservatively 10000)
  (setq scroll-preserve-screen-position t)
  (setq next-screen-context-lines 10)
#+END_SRC

* paths

Ensure certain directories are always available.  Taken directly from Howard Abrams.
Explicitly set storage files.

#+BEGIN_SRC emacs-lisp
  (let* ((subdirs '("local_elisp" "local_snippets"))
         (fulldirs (mapcar (lambda (d) (expand-file-name d "~/.emacs.d") ) subdirs)))
    (dolist (dir fulldirs)
      (when (not (file-exists-p dir))
        (message "Make directory: %s" dir)
        (make-directory dir))))

  (let* ((filenames '("ephemera.org" "kanban.org" "notes.org" "elfeed.org" "books.org"))
         (fullnames (mapcar (lambda (d) (expand-file-name d "~/org") ) filenames)))
    (dolist (file fullnames)
      (when (not (file-exists-p file))
        (let ((inhibit-message t))
          (message "File %s not found" file)))))

  (add-to-list 'load-path "~/.emacs.d/local_elisp")

  (setq abbrev-file-name "~/.emacs.d/abbrev_defs")
  (setq bookmark-default-file "~/.emacs.d/bookmarks")
  (setq diary-file "~/.emacs.d/diary")
#+END_SRC

* display

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (when window-system
    (scroll-bar-mode -1)
    (global-hl-line-mode 1))
#+END_SRC

* editing

+ If text is selected, typing deletes it.
+ Add newline to bottom of every file.
+ Prevent tab insertion.
+ Let presses to C-<SPC> after C-u C-<SPC> continue to pop mark ring
+ Remove the warnings around capitalization functions.
+ Remove warning for using "a" in dired to find file and close dired buffer.
+ Remove warning for narrow to region.
+ If there are two dired buffers open, copy and move default to the other one.
+ Use the same backslashes for regex isearch and re-builder.
+ Use the trash ~/.local/share/Trash/files.  C-d will delete.
+ Pretty print result of eval thank you to Karthinks [[https://karthinks.com/software/an-elisp-editing-tip/][blog]].

#+BEGIN_SRC emacs-lisp
  (setq column-number-mode t)
  (delete-selection-mode t)
  (setq require-final-newline t)
  (setq-default indent-tabs-mode nil)
  (setq set-mark-command-repeat-pop t)
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
  (put 'dired-find-alternate-file 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (setq dired-dwim-target t)
  (setq reb-re-syntax 'string)
  (setq delete-by-moving-to-trash t)
  (global-set-key [remap eval-last-sexp] 'pp-eval-last-sexp)
#+END_SRC

* font

Matthew Butterick's [[https://mbtype.com/fonts/triplicate/][Triplicate]] font.  Also see online text [[https://practicaltypography.com/][Practical Typography]].

#+BEGIN_SRC emacs-lisp
  (setq js/default-font-height 240)
  (setq frame-inhibit-implied-resize t)

  (cond ((member "xos4 Terminus" (font-family-list))
         (set-face-attribute 'default nil :font "xos4 Terminus"))
        ((member "Ubuntu Mono" (font-family-list))
         (set-face-attribute 'default nil :font "Ubuntu Mono"))
        ((member "Triplicate T4c" (font-family-list))
         (set-face-attribute 'default nil :font "Triplicate T4c")))

  (set-face-attribute 'default nil :height js/default-font-height)

  (defun js/change-face-height (height)
    "Changes height for default face."
    (interactive
     (list (read-from-minibuffer (format "Enter new height (current is %s) or press <RET> for default (%s): "
                                         (face-attribute 'default :height) js/default-font-height)
                                 nil nil t nil (number-to-string js/default-font-height))))
    (set-face-attribute 'default nil :height height))

  (defun js/change_face ()
    (interactive)
    (let ((font (js/counsel-fonts-no-insert)))
      (set-face-attribute 'default nil :font font)))

  (defun js/counsel-fonts-no-insert ()
    (let ((current-font
           (symbol-name (font-get (face-attribute 'default :font) :family))))
      (ivy-read "Font: " (delete-dups (font-family-list))
                :preselect current-font
                :require-match t
                :caller 'counsel-fonts)))
#+END_SRC

* spelling

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :ensure t
    :diminish flyspell-mode

    :config
    (setq ispell-program-name "aspell"
          ispell-local-dictionary "en_US"
          ispell-dictionary "american"
          ispell-extra-args '("--sug-mode=ultra" "--lang=en_US")
          ispell-list-command "--list"))
#+END_SRC

* ElDoc

[[https://www.emacswiki.org/emacs/ElDoc][ElDoc]]

#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :diminish eldoc-mode)
#+END_SRC

* new scratch buffers

Functions come from Harry Schwartz.  Most workflows start with one of these.

#+BEGIN_SRC emacs-lisp
        (defun js/new-buffer-checked ()
            "Create and switch to a temporary scratch org buffer with a random
             name.  Include spell checking."
            (interactive)
            (switch-to-buffer (make-temp-name "scratch-"))
            (org-mode)
            (flyspell-mode)
            (visual-line-mode))

        (global-set-key (kbd "C-c f") 'js/new-buffer-checked)

        (defun js/new-bom ()
            "Create and switch bom scratch buffer"
            (interactive)
            (switch-to-buffer (make-temp-name "bom-"))
            (org-mode)
            (insert
  "#+HTML_HEAD: <style>body {font-size: xx-large;}</style>
  ,#+OPTIONS: html-postamble:nil date:nil
  ,#+TITLE:BOM
  ,#+ATTR_HTML: :border2 :rules all :frame border
  ,#+LaTeX_HEADER: \\usepackage{extsizes}
  ,#+latex_class_options: [17pt]
  | /    | <>|<> |<>   |
  | ITEM | 0 | 1 | SUM |
  |------+---+---+-----|
  |      |   |   |   3 |
  ,#+TBLFM: $4=vsum($2..$3)"
      )
            (goto-char 294)
            (if (file-exists-p "c:/Users/justin/Dropbox/Documents/job files")
                (cd "c:/Users/justin/Dropbox/Documents/job files")
              (cd "~/org")))
#+END_SRC

* copy a date from the calendar into the kill ring

[[https://emacs.stackexchange.com/questions/41978/how-to-retrieve-the-date-under-the-cursor-in-emacs-calendar-as-the-format-day-mo][Stack Overflow]]

#+BEGIN_SRC emacs-lisp
  (defcustom calendar-copy-as-kill-format "%Y-%m-%d"
    "Format string for formatting calendar dates with `format-time-string'."
    :type 'string
    :group 'calendar)

  (defun calendar-copy-as-kill ()
    "Copy date at point as kill if region is not active.
  Delegate to `kill-ring-save' otherwise."
    (interactive)
    (if (use-region-p)
        (call-interactively #'kill-ring-save)
      (let ((date (calendar-cursor-to-date)))
        (when date
          (setq date (encode-time 0 0 0 (nth 1 date) (nth 0 date) (nth 2 date)))
          (kill-new (format-time-string calendar-copy-as-kill-format date))))))

  (defun my-calendar-mode-hook-fun ()
    "Let \[kill-ring-save] copy the date at point if region is not active."
    (local-set-key [remap kill-ring-save] #'calendar-copy-as-kill))

  (add-hook 'calendar-mode-hook #'my-calendar-mode-hook-fun)
#+END_SRC

* direct changes from customize into specific file

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

* file backups

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        '(("." . "~/emacs_backups")))
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq delete-old-versions t)
  (setq kept-old-versions 1)
  (setq kept-new-versions 5)
  (setq backup-by-copying t)
#+END_SRC

* various mode hooks

#+BEGIN_SRC emacs-lisp
  (add-hook 'today-visible-calendar-hook 'calendar-mark-today)

  (add-hook 'python-mode-hook
       (lambda ()
         (display-line-numbers-mode 1)
         (superword-mode 1)))

  (add-hook 'python-mode-hook
            (lambda ()
              (add-to-list 'write-file-functions 'delete-trailing-whitespace)))

  (add-hook 'dired-mode-hook
            (lambda ()
              (dired-hide-details-mode 1)))

  (add-hook 'eshell-mode-hook
            (lambda ()
              (abbrev-mode 1)
              (display-line-numbers-mode 1)))

  (add-hook 'org-mode-hook
            (lambda ()
              (visual-line-mode 1)))
#+END_SRC

* enable recent file tracking

[[https://www.masteringemacs.org/article/find-files-faster-recent-files-package][Mastering Emacs]]

#+BEGIN_SRC emacs-lisp
  (recentf-mode t)
  (setq recentf-max-saved-items 150)
  (global-set-key (kbd "C-x C-r") 'recentf-open-files)
#+END_SRC

* org mode housekeeping

Inspired by Karl Voit's [[https://karl-voit.at/2014/08/10/bookmarks-with-orgmode/][post]], started using org mode for storing bookmarks.  Abrams also
discusses capture templates extensively.  His gentle introduction is  [[http://howardism.org/Technical/Emacs/capturing-intro.html][here]].

I don't want to confirm every time babel evaluates.

#+BEGIN_SRC emacs-lisp
  
(setq org-agenda-files (quote ("~/org/ephemera.org" "~/org/kanban.org" "~/org/notes.org" "~/org/habits.org")))
  (setq org-export-with-toc nil)
  (setq org-html-postamble nil)
  (setq org-cycle-separator-lines 0)
  (setq org-refile-targets '((nil . (:maxlevel . 2))))
  (setq org-confirm-babel-evaluate nil)
  (setq org-agenda-span 'day)
  (setq org-cycle-emulate-tab 'white)
  (setq org-agenda-window-setup 'current-window)
  (setq org-return-follows-link t)
  (setq org-startup-folded t)
  (setq org-adapt-indentation nil)
  (setq org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
  (setq org-use-speed-commands t)
  (setq org-todo-keywords
        '((sequence "TODO" "|" "DONE")
          (sequence "BLOCKED")))
  (setq org-publish-project-alist
        '(("keyboard"
           :base-directory "~/notes/"
           :exclude "org"
           :include ("keyboard.org")
           :publishing-function org-html-publish-to-html
           :publishing-directory "~/org/html")))

  (setq org-capture-templates
        (quote
         (("e" "TODO ephemera" entry
           (file "~/org/ephemera.org")
           "* TODO %?\nSCHEDULED: %t")
          ("b" "bookmark clipped link" entry
           (file "~/org/notes.org")
           "* [[%?]] \n:PROPERTIES:\n:CREATED: %U\n:END:\n"
           :empty-lines 1)
          ("f" "blood pressure" table-line
           (file "~/org/bp.org")
           "| %^{date}U | %^{sys} | %^{dia} | %^{pulse}")
          ("t" "TODO kanban/tasks" entry
           (file+headline "~/org/kanban.org" "tasks")
           "* TODO %?\nSCHEDULED: %t")
          ("u" "TODO ephemera/unfiled" entry
           (file+headline "~/org/ephemera.org" "unfiled")
           "* TODO %?")
          ("o" "TODO book" entry
           (file "~/org/books.org")
           (function js/build-book-template) :empty-lines 1))))

  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c a") 'org-agenda-list)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (dot . t)))

  (define-key org-mode-map (kbd "C-c C-x C-s") nil)

  (add-to-list 'org-modules 'org-habit)
  (require 'org-habit)

  (if (string= org-version "9.5.2")
      (add-to-list 'org-speed-commands
                   '("S" . (org-insert-subheading '(4))))
    (add-to-list 'org-speed-commands-user
                 '("S" . (org-insert-subheading '(4)))))

  (defun js/org-export-ascii-to-kill ()
    "Exports current org buffer as ascii to kill ring."
    (interactive)
    (kill-new (org-export-as 'ascii)))

  (defun js/build-book-template ()
    (let ((title (capitalize (read-string "Title: ")))
          (author (capitalize (read-string "Author l,f: ")))
          (date-read (read-string "Date read: " (format-time-string "%F")))
          (rating (read-string "Rating 1-5: " "4")))
      (format "* %s\n  :PROPERTIES:\n  :AUTHOR: %s\n  :DATE_READ: %s\n  :RATING:   %s\n  :TITLE:    %s\n  :END:" title author date-read rating title)))

  (defun js/org-return (arg)
    "If ARG or not in a list behave normally, otherwise add a list item."
    (interactive "P")
    (if (and (org-in-item-p) (null arg))
        (org-insert-item)
      (org-return)))

  (define-key org-mode-map [remap org-return] #'js/org-return)

  (defun js/flush-all-blank-lines ()
    "Remove all lines containing only whitespace in a buffer."
    (interactive)
    (save-excursion
      (beginning-of-buffer)
      (flush-lines "^ *$")))

#+END_SRC

* navigation within a file

[[https://github.com/abo-abo/avy][avy]] [[https://melpa.org/#/avy][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("C-c i" . avy-goto-char-timer))
#+END_SRC


* expand region based on context

[[https://github.com/magnars/expand-region.el][expand-region]] [[https://melpa.org/#/expand-region][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
#+END_SRC


* snippets

[[https://github.com/joaotavora/yasnippet][yasnippet]] [[https://melpa.org/#/yasnippet][MELPA]] [[https://github.com/AndreaCrotti/yasnippet-snippets][yasnippet-snippets]] [[https://melpa.org/#/yasnippet-snippets][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
      :ensure t
      :diminish yas-minor-mode
      :init
      (yas-global-mode 1)
      :config
      (setq yas-snippet-dirs (append yas-snippet-dirs
                                       '("~/.emacs.d/local_snippets")))
      (yas-reload-all)
      :bind ("C-<" . yas-insert-snippet))
#+END_SRC

* quick snippets

[[https://github.com/abo-abo/auto-yasnippet][auto-yasnippet]] [[https://melpa.org/#/auto-yasnippet][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package auto-yasnippet
    :ensure t
    :bind (("C-c w" . aya-create)
           ("C-c y" . aya-expand)))
#+END_SRC


* editing helpers

[[https://github.com/bbatsov/crux][crux]] [[https://melpa.org/#/crux][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package crux
    :ensure t
    :bind (("C-a" . crux-move-beginning-of-line)
           ("S-<return>" . crux-smart-open-line)
           ("C-c d" . crux-duplicate-current-line-or-region)
           ("C-c M-d" . crux-duplicate-and-comment-current-line-or-region)
           ("C-x 4 t" . crux-transpose-windows)
           ("C-c t" . crux-visit-term-buffer)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-z") 'zap-up-to-char)
  (global-set-key (kbd "C-c <DEL>") 'kill-whole-line)
  (defalias 'eb 'eval-buffer)
  (defalias 'cal 'calendar)
#+END_SRC

* testing packages

[[https://github.com/larstvei/Try][try]] [[https://melpa.org/#/try][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

* nicer help

[[https://github.com/Wilfred/helpful][helpful]] [[https://melpa.org/#/helpful][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :ensure t
    :bind ("C-c h" . helpful-at-point))
#+END_SRC

* disable mouse

[[https://github.com/purcell/disable-mouse/tree/541363bd6353b8b05375552bab884a6315ea545c][disable-mouse]] [[https://melpa.org/#/disable-mouse][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package disable-mouse
    :ensure t
    :diminish disable-mouse-global-mode
    :config
    (global-disable-mouse-mode))
#+END_SRC

* ibuffer

Mike Zamansky [[https://github.com/zamansky/using-emacs/blob/master/myinit.org][init]] [[https://cestlaz-nikola.github.io/posts/using-emacs-34-ibuffer-emmet/#.W6evkrQpA5k][video]]

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (mode . org-mode))
                 ("python" (mode . python-mode))
                 ("elisp" (or (mode . emacs-lisp-mode)
                              (mode . lisp-interaction-mode)))
                 ("html" (mode . mhtml-mode))
                 ("css" (mode . css-mode))
                 ("javascript" (mode . js-mode))
                 ("exwm" (mode . exwm-mode))
                 ("eshell" (mode . eshell-mode))
                 ("magit" (or (mode . magit-status-mode)
                              (mode . magit-process-mode)
                              (mode . magit-diff-mode)))
                 ("help" (or (mode . helpful-mode)
                             (mode . Info-mode)
                             (mode . help-mode)))
                 ("message" (mode . message-mode))
                 ("sql" (or (mode . sql-mode)
                            (mode . sql-interactive-mode)))))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")
              (define-key ibuffer-mode-map (kbd "(")
                'ibuffer-switch-format)))
  (setq ibuffer-show-empty-filter-groups nil)
  (setq ibuffer-formats '((mark modified read-only locked " "
                                (name 16 -1))
                          (mark modified read-only locked " "
                                (name 18 18 :left :elide)
                                " "
                                (size 9 -1 :right)
                                " "
                                (mode 16 16 :left :elide)
                                " " filename-and-process)))

#+END_SRC

* smartparens

[[https://github.com/Fuco1/smartparens][smartparens]] [[http://melpa.org/#/smartparens][MELPA]]

Helpful blog post [[https://ebzzry.io/en/emacs-pairs/][here]].

Instructions on disabling inch marks in org mode are [[https://github.com/Fuco1/smartparens/wiki/Permissions][here]].

#+BEGIN_SRC emacs-lisp
  (use-package smartparens-config
    :ensure smartparens
    :diminish smartparens-mode
    :config
    (smartparens-global-mode t)
    (show-smartparens-global-mode t)
    (sp-local-pair 'org-mode "\"" "\"" :actions nil)
    (sp-local-pair 'message-mode "\"" "\"" :actions nil))

  (global-set-key (kbd "C-<left>") 'sp-backward-slurp-sexp)
  (global-set-key (kbd "C-<right>") 'sp-forward-slurp-sexp)
#+END_SRC

* ivy

[[https://github.com/abo-abo/swiper][Ivy]] [[https://melpa.org/#/counsel][MELPA]]

I had been using a combination of C-r for isearch and C-s for swiper.  Watching [[https://youtu.be/y6_bmcd3nis][this]] video by Protesilaos Stavrou motivated me to fix this.  His videos are helpful along with his [[https://protesilaos.com/dotemacs/][dotfiles]].

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :diminish counsel-mode
    :bind
    ("M-y" . counsel-yank-pop)
    ("M-x" . counsel-M-x)
    ("C-x C-f" . counsel-find-file))

  (use-package ivy
    :ensure t
    :diminish ivy-mode
    :bind
    ("C-x b" . ivy-switch-buffer)
    :config
    (ivy-mode 1)
    (counsel-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy))

  (use-package swiper
    :ensure t
    :bind
    ("C-z" . swiper))
#+END_SRC

* upcase table

#+BEGIN_SRC emacs-lisp
  (defun js/upcase-table ()
    "Makes all text in an org table upper case."
    (interactive)
    (when (org-at-table-p)
      (upcase-region (org-table-begin) (org-table-end))))
#+END_SRC

* mail

#+BEGIN_SRC emacs-lisp
  (use-package sendmail
    :commands
    (mail-send)
    :init
    (setq mailclient-place-body-on-clipboard-flag nil)
    (setq message-kill-buffer-query nil)
    (setq send-mail-function (quote mailclient-send-it))
    (setq message-required-headers (quote ((optional . References))))
    (setq message-auto-save-directory nil)
    (defun js/message-upcase-subject ()
    "Capitalize the subject of a mail message."
    (interactive)
    (save-excursion
      (beginning-of-buffer)
      (if (re-search-forward "^Subject:\\(.+\\)$" nil t 1)
          (upcase-region (match-beginning 1) (match-end 1)))))
    (defun js/mail-send-and-kill (arg)
      "Send a message and dispose of the buffer."
      (interactive "P")
      (when arg
          (js/message-upcase-subject))
      (set-visited-file-name nil t)
      (mail-send)
      (message-kill-buffer))
    (add-hook 'message-mode-hook
              (lambda ()
                (define-key message-mode-map (kbd "C-c s")
                  'js/mail-send-and-kill)))
    :hook
    ((message-mode . turn-on-orgtbl)
     (message-mode . turn-off-auto-fill)
     (message-mode . turn-on-flyspell)))
#+END_SRC

* recentf-ext

This [[https://twitter.com/xenodium/status/1082020496466690048][tweet]] from Alvaro Ramirez came right when I was thinking about how to quickly get to directories without using bookmarks.

[[https://github.com/rubikitch/recentf-ext/tree/450de5f8544ed6414e88d4924d7daa5caa55b7fe][recentf-ext]] [[https://melpa.org/#/recentf-ext][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package recentf-ext
    :ensure t)
#+END_SRC

* store job numbers in registers

#+BEGIN_SRC emacs-lisp
  (defun js/set-job-register (job)
    (interactive "sJob: ")
    (let ((job (upcase job)))
      (set-register ?j job)
      (set-register ?J (concat job " SPECIAL PARTS.pdf"))))
#+END_SRC

* make comma separated lists of tags

[[https://stackoverflow.com/questions/17922208/emacs-convert-items-on-separate-lines-to-a-comma-separated-list][Stack Overflow]]

#+BEGIN_SRC emacs-lisp
  (defun js/sort-comma (reverse beg end)
    "Take a list of tags one per line, capitalize them, sort them,
     then replace the line breaks with commas."
    (interactive "P\nr")
    (upcase-region beg end)
    (sort-lines reverse beg end)
    (save-excursion
      (save-restriction
        (narrow-to-region beg end)
        (end-of-buffer)
        (beginning-of-line)
        (insert "and ")
        (beginning-of-buffer)
        (while (search-forward "\n" nil t)
          (replace-match ", "))
        )))
#+END_SRC

* ace-window

[[https://github.com/abo-abo/ace-window][ace-window]] [[https://melpa.org/#/ace-window][MELPA]]

[[https://youtu.be/D6OUMVbPKSA][Mike Zamansky video]]
[[https://youtu.be/nKCKuRuvAOw][Sacha Chua video]]

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :config
    (setq aw-keys '(?a ?s ?d ?f ?k ?l ?\;))
    (setq aw-char-position (quote left))
    (custom-set-faces
     '(aw-leading-char-face ((t (:foreground "red" :height 3.0)))))
    :bind ("<f16>" . ace-window))
#+END_SRC

* stripe region or table

#+BEGIN_SRC emacs-lisp
  (defvar js-hi '(:background "dim grey"))

  (defun js/stripe-region (start end)
    "Stripe alternate lines of region."
    (interactive "r")
    (save-excursion
      (goto-char start)
      (while (< (point) end)
        (let ((o (make-overlay (line-beginning-position) (line-end-position))))
          (overlay-put o 'js t)
          (overlay-put o 'face js-hi))
        (forward-line 2))))

  (defun js/stripe-table ()
    "Stripe alternate lines of org-table"
    (interactive)
    (when (org-at-table-p)
      (js/stripe-region (org-table-begin) (org-table-end))))

  (defun js/stripe-remove ()
    "Remove stripes."
    (interactive)
    (remove-overlays nil nil 'js t))
#+END_SRC

* pinned buffer minor mode

Wrapper for easily pinning a buffer to a window.  Found it [[https://github.com/carrete/.emacs.d/blob/master/lisp/setup-pinned-buffer-mode.el][here]].  Still working on window management in emacs.

#+BEGIN_SRC emacs-lisp
  (define-minor-mode pinned-buffer-mode
    "Pin the current buffer to the selected window."
    :lighter nil " P" nil
    (set-window-dedicated-p (selected-window) pinned-buffer-mode))

  (global-set-key (kbd "C-c p") 'pinned-buffer-mode)

  (provide 'setup-pinned-buffer-mode)
#+END_SRC

* window management
This reddit [[https://www.reddit.com/r/emacs/comments/24zu2a/how_do_i_stop_emacs_from_taking_over_my_split/][thread]] was helpful.  Elisp [[https://www.gnu.org/software/emacs/manual/html_node/elisp/The-Zen-of-Buffer-Display.html#The-Zen-of-Buffer-Display][manual]] has details.
Another helpful reddit [[https://www.reddit.com/r/emacs/comments/cpdr6m/any_additional_docstutorials_on_displaybuffer_and/][thread]].

#+BEGIN_SRC emacs-lisp
  (defun js/split-right-34 ()
    "Splits window right using three quarters of the available space."
    (interactive)
    (split-window-right (floor (* .75 (window-total-width)))))

  (defun js/split-below-34 ()
    "Splits window below using three quarters of the available space."
    (interactive)
    (split-window-below (floor (* .75 (window-total-height)))))

  (defun js/triple ()
    "Splits window into three panes with the middle taking 50%."
    (interactive)
    (delete-other-windows)
    (let ((width (floor (* .25 (frame-width)))))
      (split-window nil width "left" nil)
      (other-window 1)
      (split-window nil (* -1 width) "right" nil)))

  (setq display-buffer-alist
        '(("\\*Help" (display-buffer-same-window))
          ("\\*Apropos" (display-buffer-same-window))
          ("\\*helpful" (display-buffer-same-window))
          ("\\*ivy-occur" (display-buffer-same-window))
          ("\\*Ledger Report" (display-buffer-same-window))
          ("\\*deadgrep" (display-buffer-use-some-window))
          ("\\*info" (display-buffer-same-window display-buffer-use-some-window))
          ("\\*Python" (display-buffer-use-some-window))
          ("\\*Pp Eval Output" (display-buffer-reuse-window display-buffer-use-some-window))))
#+END_SRC

* reformatter

[[https://github.com/purcell/reformatter.el][reformatter]] [[http://stable.melpa.org/#/reformatter][MELPA]]

Add a directory local to assign a value to commands.

#+BEGIN_SRC emacs-lisp
  (use-package reformatter
    :ensure t
    :config
    (defcustom black-command nil
      "Path to black executable")
    (reformatter-define black
      :program (if black-command
                   black-command
                 (concat default-directory "env/bin/black"))
      :args '("-"))
    (defcustom sqlformat-command "sqlformat"
      "Path to sqlformat executable")
    (reformatter-define sqlformat
      :program (if sqlformat-command
                   sqlformat-command
                 (concat default-directory "env/bin/sqlformat"))
      :args '("-r" "-k" "upper" "--wrap_after" "80" "-")))
#+END_SRC

* compilation

Found [[https://stackoverflow.com/questions/11043004/emacs-compile-buffer-auto-close][this]] Stack Overflow post regarding compilation-finish-functions.  Mickey Peterson has more information about compilation [[https://masteringemacs.org/article/compiling-running-scripts-emacs][here]].

#+BEGIN_SRC emacs-lisp
  (defun js/focus-compile-window (buffer msg)
    (select-window (get-buffer-window buffer)))

  (add-hook 'compilation-finish-functions 'js/focus-compile-window)

  (global-set-key (kbd "C-c r") 'recompile)
#+END_SRC

* calc

m m and Z P will clobber this with calc.el (like custom.el).

#+BEGIN_SRC emacs-lisp
  (setq calc-display-trail nil)
  (setq calc-frac-format '("+/" nil))
  (setq calc-algebraic-mode t)

  (defun js/calc-copy-and-remove-plus (arg)
    "Copy the top of the calc stack to the kill ring.  Removes
  fraction plus signs.  If the prefix argument is given, copies ARG
  entries one per line."
    (interactive "P")
    (with-temp-buffer
      (calc-copy-to-buffer arg)
      (js/format-calc-fraction)))


  (defun js/quick-calc-remove-plus ()
    "Launch quick calc and copy result to kill ring without fraction
  plus signs."
    (interactive)
    (with-temp-buffer
      (quick-calc 4)
      (js/format-calc-fraction)))


  (defun js/format-calc-fraction ()
    "Removes fraction plus signs and leading zeros."
    (while (re-search-backward "+" nil t)
      (replace-match " "))
    (goto-char (point-min))
    (if (looking-at-p "0 ")
        (forward-char 2))
    (kill-region (point) (point-max)))


  (global-set-key (kbd "C-c k") 'js/quick-calc-remove-plus)


  (put 'calc-define 'jsfns
       '(progn
          (defmath jsround (n)
            "Round N to the nearest 64th."
            (interactive 1 "jsr")
            (/ (round (* n 64)) 64))
          (define-key calc-mode-map "Ye" 'calc-jsround)
          (define-key calc-mode-map "Yw" 'js/calc-copy-and-remove-plus)
          (setq calc-Y-help-msgs
                (cons "E round to 64th, W copy clean" calc-Y-help-msgs))))

  (run-hooks 'calc-check-defines)
#+END_SRC

* theme

Protesilaos Stavrou has published his accessible [[https://gitlab.com/protesilaos/modus-themes][themes]] on MELPA.  They are on display in his Emacs [[https://www.youtube.com/channel/UC0uTPqBCFIpZxlz_Lv1tk_g][videos]].

#+BEGIN_SRC emacs-lisp
  (use-package modus-themes
    :ensure t
    :init
    (setq modus-themes-region '(accented))
    (setq modus-themes-mode-line '(accented))
    (setq modus-themes-completions '((selection . (accented intense text-also))))
    (modus-themes-load-themes)
    :config
    (modus-themes-load-vivendi))
#+END_SRC

* elfeed

[[https://github.com/skeeto/elfeed][elfeed]] [[https://melpa.org/#/elfeed][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t)
#+END_SRC

[[https://github.com/remyhonig/elfeed-org][elfeed-org]] [[https://melpa.org/#/elfeed-org][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package elfeed-org
    :ensure t
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/org/elfeed.org")))
#+END_SRC

* stop emacs from exiting with a clock running
#+BEGIN_SRC emacs-lisp
  (add-hook 'kill-emacs-query-functions
            (lambda ()
              (if (and (fboundp 'org-clocking-p)
                       (org-clocking-p))
                  (progn (message "clocked-in")
                         nil)
                t)))
#+END_SRC

* build a SQL IN clause from lines of text
#+BEGIN_SRC emacs-lisp
    (defun js/build-in-clause ()
      "Creates a SQL IN clause from each line in a buffer and adds it to kill ring."
      (beginning-of-buffer)
      (while (re-search-forward "^\\(.+\\)$" nil t)
        (replace-match "'\\1'," nil nil))
      (delete-backward-char 1)
      (insert ")")
      (beginning-of-buffer)
      (insert "IN\n(")
      (end-of-buffer)
      (copy-region-as-kill (point-min) (point-max)))

    (defun js/in-clause-builder (beg end)
      "Creates a SQL IN clause from the active region one item per line and adds the IN clause
  to the kill ring.  If there is no active region, the entire buffer is used."
      (interactive "r")
      (if (use-region-p)
          (progn
            (copy-region-as-kill beg end)
            (with-temp-buffer
              (yank)
              (js/build-in-clause)))
        (js/build-in-clause)))
#+END_SRC

* winner mode
#+BEGIN_SRC emacs-lisp
(winner-mode)
#+END_SRC

* GPG

EPG tells gpg agent pinentry is loopback, gpg-agent returns responsibility
for passphrase back to EPG.  EPG prompts at the minibuffer.

#+BEGIN_SRC emacs-lisp
(setq epg-pinentry-mode 'loopback)
#+END_SRC

* company

[[http://company-mode.github.io/][web]] [[https://melpa.org/#/company][MELPA]]

I've generally tried to avoid completions flashing on the screen but Tony Adlon's
[[https://youtu.be/96jn5A73-oQ][video]] convinced me to try company.

#+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :diminish company-mode
      :config
      (setq company-show-numbers t)
      (setq company-dabbrev-char-regexp "\\sw\\|_")
      (define-key company-active-map (kbd "C-n") #'company-select-next)
      (define-key company-active-map (kbd "C-p") #'company-select-previous)
      (add-hook 'emacs-lisp-mode-hook
                (lambda ()
                  (set (make-local-variable 'company-backends) '(company-capf company-dabbrev-code company-files))
                  (company-mode))))
#+END_SRC

* sql

Using the [[https://github.com/sebasmonia/sqlcmdline][sqlcmdline]] package to connect to SQL.  The regexp add to the sql-product-alist is not required in Emacs 27.
Updated default rows variable inside sqlcmdline to 0 and added :t :c less verbose tables and cols functions there also.

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'sql
  (plist-put (alist-get 'ms sql-product-alist) :prompt-cont-regexp "^[0-9]*>")
  (setq sql-ms-options nil)
  (setq sql-ms-program "sqlc")
  (add-hook 'sql-mode-hook
            (lambda ()
              (set (make-local-variable 'company-backends) '(company-dabbrev company-capf company-files))
              (setq company-dabbrev-ignore-buffers (lambda (buf) nil))
              (company-mode)))

  (add-hook 'sql-interactive-mode-hook
            (lambda ()
              (set (make-local-variable 'company-backends) '(company-dabbrev company-capf company-files))
              (company-mode)
              (setq truncate-lines t))))
#+END_SRC

* optional local packages

Thank you to [[https://github.com/purcell/emacs.d/blob/master/lisp/init-elpa.el][Steve Purcell]] for maybe-require function.

#+BEGIN_SRC emacs-lisp
  (defun maybe-require (feature)
    "Try to install PACKAGE, and return non-nil if successful.
  In the event of failure, return nil and print a warning message."
    (condition-case err
        (require feature)
      (error
       (let ((inhibit-message t))
         (message "Couldn't install optional feature `%s': %S" feature err))
       nil)))

  (maybe-require 'minicad)
#+END_SRC

* web searches from emacs
#+BEGIN_SRC emacs-lisp
  (defconst js/query-file "~/.emacs.d/web_q"
    "File to store queries.")

  (defvar js/query-history ()
    "Current list of queries.")

  (defun js/query-write()
    "Write history list to disk.  Will create file if it doesn't exist."
    (with-temp-buffer
      (insert "\n(")
      (dolist (i js/query-history) (pp i (current-buffer)))
      (insert ")")
      (write-region nil nil js/query-file)))

  (add-hook 'kill-emacs-hook 'js/query-write)

  (defun js/query-read ()
    "Read history list from disk."
    (with-temp-buffer
      (insert-file-contents js/query-file)
      (goto-char (point-min))
      (setq js/query-history (read (current-buffer)))))

  (when (file-exists-p js/query-file)
    (js/query-read))

  (defun js/web-search (arg)
    "Start a web search.  If ARG use default browser.  Otherwise use eww."
    (interactive "P")
    (let* ((query (completing-read "Query> " js/query-history))
           (url (url-encode-url (format "https://duckduckgo.com/?q=%s" query))))
      (add-to-list 'js/query-history (downcase query))
      (if arg
          (browse-url url)
        (eww-browse-url url))))

  (global-set-key (kbd "C-c q") 'js/web-search)
#+END_SRC

* dumb-jump
[[https://github.com/jacktasia/dumb-jump][web]] [[https://melpa.org/#/dumb-jump][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :config
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+END_SRC

* deadgrep
[[https://github.com/Wilfred/deadgrep][web]] [[https://melpa.org/#/deadgrep][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package deadgrep
    :ensure t)
#+END_SRC

* training helpers

[[https://en.wikipedia.org/wiki/One-repetition_maximum][Wikipedia: One-repetition maximum]]

#+BEGIN_SRC emacs-lisp
  (defvar barbell-bar-weight 20
    "Weight in kilograms of barbell.")
  (defvar barbell-plate-inventory '(25 20 15 10 5 2.5 1)
    "Inventory of plates in kilograms.  Assumes plates as pairs.")

  (defun barbell--load (load)
    "Generate a list of plates from the given LOAD."
    (let ((load (- load barbell-bar-weight))
          (available (sort barbell-plate-inventory '>))
          (result))
      (if (= 0
               (dolist (current available load)
                 (when (>= load (* 2 current))
                   (setq load (- load (* 2 current)))
                   (setq result (cons current result)))))
          (reverse result)
        (user-error "%s" "Impossible load"))))


  (defun barbell-load (load-string)
    "Convert LOAD-STRING to the representation of the plates on the bar."
    (interactive (let ((number-at-point (thing-at-point 'number)))
                   (list (read-string "Load: "
                                      (when number-at-point
                                        (number-to-string number-at-point))))))
    (let* ((load (string-to-number load-string))
           (result (barbell--load load)))
      (message (format "%s kg (%d lbs) %s" load (* 2.2 load)
                       (if result
                           (seq-reduce (lambda (x y)
                                     (format "%s--%s" x y))
                                       result "")
                         "--")))))

  (defun barbell-compute-1RM (weight reps)
    "Compute the one rep maximum for WEIGHT and REPS using the Epley formula."
    (interactive "nWeight: \nnReps: ")
    (message "%s" (+ (* weight reps 0.0333) weight)))
#+END_SRC

* git interface

[[https://github.com/magit/magit][magit]] [[https://melpa.org/#/magit][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC

* ledger

[[https://github.com/ledger/ledger-mode][ledger-mode]] [[https://melpa.org/#/ledger-mode][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :ensure t
    :config
    (add-hook 'ledger-mode-hook
              (lambda ()
                (setq-local tab-always-indent 'complete)
                (setq-local completion-cycle-threshold t)
                (setq-local ledger-complete-in-steps t)))
    (setq ledger-default-date-format ledger-iso-date-format))
#+END_SRC

* hippie expand

Xah Lee has a [[http://xahlee.info/linux/linux_xmodmap_tutorial.html][tutorial]] on using the higher function keys in Linux.  More information can be found on the [[https://wiki.archlinux.org/index.php/Xmodmap][Arch Wiki]].

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f17>") 'hippie-expand)
#+END_SRC

* package lint

[[https://github.com/purcell/package-lint][package-lint]] [[https://melpa.org/#/package-lint][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package package-lint
    :ensure t)
#+END_SRC

* launch work setup

Run ispell last

#+BEGIN_SRC emacs-lisp
  (defun js/scroll-to-bottom (&optional e)
    (let ((this-scroll-margin
           (min (max 0 scroll-margin)
                (truncate (/ (window-body-height) 4.0)))))
      (recenter (- -1 this-scroll-margin) t)))

  (defun js/go-to-work ()
    (interactive)
    (desktop-read)
    (modus-themes-toggle)
    (eshell)
    (calc)
    (sql-connect "engineering")
    (sql-connect "customer_service")
    (add-to-list 'org-capture-templates
               '("j" "log HMF listing" plain (file "~/org/js_list.org")
                 "%t --- %(insert-register ?j)%?"))
    (require 'org-agenda)
    (add-to-list 'org-agenda-custom-commands
                 '("x" "Agenda grouped by priority"
                   ((agenda ""
                            ((org-agenda-skip-function
                              '(org-agenda-skip-entry-if 'notregexp "\\[#A]"))
                             (org-agenda-overriding-header "Daily")))
                    (agenda ""
                            ((org-agenda-skip-function
                              '(org-agenda-skip-entry-if 'notregexp "\\[#B]"))
                             (org-agenda-overriding-header "Weekly")))
                    (agenda ""
                            ((org-agenda-skip-function
                              '(org-agenda-skip-entry-if 'notregexp "\\[#C]"))
                             (org-agenda-overriding-header "Quarterly")))
                    (agenda ""
                            ((org-agenda-skip-function
                              '(org-agenda-skip-entry-if 'regexp "\\[#A]\\|\\[#B]\\|\\[#C]"))))
                    (todo "BLOCKED" ((org-agenda-overriding-header "Blocked"))))))
    (add-to-list 'org-agenda-custom-commands
                 '("y" "notes TODO" todo "TODO"
                    ((org-agenda-files '("~/org/notes.org"))
                     (org-agenda-overriding-header "Notes TODO"))))
    (global-set-key (kbd "C-c a") (lambda () (interactive) (org-agenda "" "x")))
    (advice-add 'org-agenda-redo-all :after #'js/scroll-to-bottom)
    (ispell))

  (defun js/toggle-coding ()
    (interactive)
    (if ivy-use-virtual-buffers
        (progn
          (setq ivy-use-virtual-buffers nil)
          (js/change-face-height 180))
      (setq ivy-use-virtual-buffers t)
      (js/change-face-height js/default-font-height))
    (calc)
    (ispell))

  (defun js/desktop-to-job ()
    (interactive)
    (let ((full-job (get-register ?j)))
      (unless (null full-job)
        (let* ((job-number (car (split-string full-job "[.]")))
               (job-folder (expand-file-name job-number "c:/Users/justin/Dropbox/Documents/job files")))
          (when (file-exists-p job-folder)
            (delete-other-windows)
            (split-window-below)
            (find-file "c:/Users/justin/Desktop")
            (find-file-other-window job-folder)
            (other-window 1))))))
#+END_SRC

* permanently delete from dired

#+BEGIN_SRC emacs-lisp
  (defun js-dired-do-destroy (ARG)
      "Permanently delete all marked (or next ARG) files."
      (interactive "P")
      (let ((trash delete-by-moving-to-trash))
        (setq delete-by-moving-to-trash nil)
        (dired-do-delete ARG)
        (setq delete-by-moving-to-trash trash)))

  (add-hook 'dired-mode-hook
            (lambda ()(define-key dired-mode-map (kbd "C-d")
                        'js-dired-do-destroy)))
#+END_SRC

* outline navigation

#+BEGIN_SRC emacs-lisp
  (defun js/outline (arg)
    "Dispatch `counsel-outline' or if ARG `counsel-imenu'."
    (interactive "P")
    (if arg
        (counsel-imenu)
      (counsel-outline)))
  (global-set-key (kbd "C-c j") 'js/outline)
#+END_SRC

* graphviz

[[https://graphviz.org/][Graphviz]]

[[https://github.com/ppareit/graphviz-dot-mode][web]] [[https://melpa.org/#/graphviz-dot-mode][MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package graphviz-dot-mode
    :ensure t
    :config
    (setq graphviz-dot-indent-width 4)
    (add-hook 'graphviz-dot-mode-hook
              (lambda ()
                (set (make-local-variable 'company-backends) '(company-graphviz-dot-backend company-capf company-dabbrev-code company-files))
                (company-mode))))

  (use-package company-graphviz-dot)
#+END_SRC
* dired auto-revert
Found a solution [[https://gist.github.com/samwhitlock/c4f0dd94a7c38c922c390c95ad249583\]\]][here.]]  Relevant Emacs [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Non_002dFile-Buffers.html][manual]] and Stack Overflow [[https://emacs.stackexchange.com/questions/29228/how-to-stop-dired-printing-reverting-buffer][post.]]
#+BEGIN_SRC emacs-lisp
(defun quiet-auto-revert ()
  "A hook to run for buffers you want to revert automatically and silently"
  (auto-revert-mode 1)
  (setq-local auto-revert-verbose nil))

(add-hook 'dired-mode-hook #'quiet-auto-revert t nil)
#+END_SRC
* superword-mode
#+BEGIN_SRC emacs-lisp
  (use-package subword
    :diminish superword-mode)
#+END_SRC
* skeletons
#+BEGIN_SRC emacs-lisp
  (defvar js/insert-book-week-date nil
    "Last used date for insert book_week.")

  (define-skeleton js/insert-book-week
    "Insert book_week row."
    nil
    "Insert into book_weeks (job, release, book, week_friday) values ('"
    '(setq v1 (split-string (skeleton-read "JOB> ") "[.]"))
    (upcase (car v1))
    "', '"
    (upcase (cadr v1))
    "', '"
    (upcase (caddr v1))
    "', '"
    '(setq v2 (skeleton-read "Friday> " js/insert-book-week-date))
    '(setq js/insert-book-week-date v2)
    v2
    "');;")
#+END_SRC
* ediff
#+BEGIN_SRC emacs-lisp
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC
* python
#+BEGIN_SRC emacs-lisp
  (setq python-shell-interpreter "python")
#+END_SRC
* scanner
#+BEGIN_SRC emacs-lisp
  (defun js/scan ()
    "Run shell script to mount drive, move images, and open dired."
    (shell-command-to-string "scanner.sh")
    (message "convert * filename.pdf")
    (dired "~/scans"))
#+END_SRC
