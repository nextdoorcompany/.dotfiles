* general

#+BEGIN_SRC emacs-lisp
  (setq visible-bell t)
  (setq confirm-kill-emacs #'y-or-n-p)
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message nil)
#+END_SRC

* display

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (when window-system
    (scroll-bar-mode -1)
    (global-hl-line-mode 1))
#+END_SRC

* editing

+ If text is selected, typing deletes it.
+ Add newline to bottom of every file.
+ Prevent tab insertion.
+ Remove the warnings around capitalization functions.

#+BEGIN_SRC emacs-lisp
  (setq column-number-mode t)
  (delete-selection-mode t)
  (setq require-final-newline t)
  (setq-default indent-tabs-mode nil)
  (setq linum-format "%d ")
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
#+END_SRC

* font

Matthew Butterick's [[https://mbtype.com/fonts/triplicate/][Triplicate]] font.  Also see online text [[https://practicaltypography.com/][Practical Typography]].

#+BEGIN_SRC emacs-lisp
  (when (member "Triplicate T4c" (font-family-list))
    (set-face-attribute 'default nil :font "Triplicate T4c"))
  (set-face-attribute 'default nil :height 240)
#+END_SRC

* spelling

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :ensure t
    :diminish flyspell-mode

    :config
    (setq ispell-program-name "aspell"
          ispell-local-dictionary "en_US"
          ispell-dictionary "american"
          ispell-extra-args '("--sug-mode=ultra" "--lang=en_US")
          ispell-list-command "--list"))
#+END_SRC

* ElDoc

[[https://www.emacswiki.org/emacs/ElDoc][ElDoc]]

#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :diminish eldoc-mode)
#+END_SRC

* new scratch buffers

Functions come from Harry Schwartz.  Most workflows start with one of these.

#+BEGIN_SRC emacs-lisp
  (defun js/new-buffer-checked ()
      "Create and switch to a temporary scratch org buffer with a random
       name.  Include spell checking."
      (interactive)
      (switch-to-buffer (make-temp-name "scratch-"))
      (org-mode)
      (flyspell-mode))

  (global-set-key (kbd "C-c f") 'js/new-buffer-checked)

  (defun js/new-scratch-buffer ()
      "Create and switch to a temporary scratch org buffer with a random
       name."
      (interactive)
      (switch-to-buffer (make-temp-name "scratch-"))
      (org-mode))
#+END_SRC

* copy a date from the calendar into the kill ring

[[https://emacs.stackexchange.com/questions/41978/how-to-retrieve-the-date-under-the-cursor-in-emacs-calendar-as-the-format-day-mo][Stack Overflow]]

#+BEGIN_SRC emacs-lisp
  (defcustom calendar-copy-as-kill-format "%Y-%m-%d"
    "Format string for formatting calendar dates with `format-time-string'."
    :type 'string
    :group 'calendar)

  (defun calendar-copy-as-kill ()
    "Copy date at point as kill if region is not active.
  Delegate to `kill-ring-save' otherwise."
    (interactive)
    (if (use-region-p)
        (call-interactively #'kill-ring-save)
      (let ((date (calendar-cursor-to-date)))
        (when date
          (setq date (encode-time 0 0 0 (nth 1 date) (nth 0 date) (nth 2 date)))
          (kill-new (format-time-string calendar-copy-as-kill-format date))))))

  (defun my-calendar-mode-hook-fun ()
    "Let \[kill-ring-save] copy the date at point if region is not active."
    (local-set-key [remap kill-ring-save] #'calendar-copy-as-kill))

  (add-hook 'calendar-mode-hook #'my-calendar-mode-hook-fun)
#+END_SRC
