* exwm

[[https://github.com/ch11ng/exwm][Source]]

Ambrevar's exwm [[https://github.com/Ambrevar/dotfiles/blob/master/.emacs.d/lisp/init-exwm.el][init]] and explanation on [[https://www.reddit.com/r/emacs/comments/6huok9/exwm_configs/][Reddit]] have been very helpful.
#+BEGIN_SRC emacs-lisp :tangle yes
    (defun js/exwm-config ()
      "Default configuration of EXWM."
      ;; Set the initial workspace number.
      (unless (get 'exwm-workspace-number 'saved-value)
        (setq exwm-workspace-number 4))
      ;; Make class name the buffer name
      (add-hook 'exwm-update-class-hook
                (lambda ()
                  (exwm-workspace-rename-buffer exwm-class-name)))
      ;; Global keybindings.
      (unless (get 'exwm-input-global-keys 'saved-value)
        (setq exwm-input-global-keys
              `(
                ;; 's-r': Reset (to line-mode).
                ([?\s-r] . exwm-reset)
                ;; 's-w': Switch workspace.
                ([?\s-w] . exwm-workspace-switch)
                ;; 's-&': Launch application.
                ([?\s-&] . (lambda (command)
                             (interactive (list (read-shell-command "$ ")))
                             (start-process-shell-command command nil command)))
                ;; 's-N': Switch to certain workspace.
                ,@(mapcar (lambda (i)
                            `(,(kbd (format "s-%d" i)) .
                              (lambda ()
                                (interactive)
                                (exwm-workspace-switch-create ,i))))
                          (number-sequence 0 9)))))
      ;; Line-editing shortcuts
      (unless (get 'exwm-input-simulation-keys 'saved-value)
        (setq exwm-input-simulation-keys
              '(([?\C-b] . [left])
                ([?\C-f] . [right])
                ([?\C-p] . [up])
                ([?\C-n] . [down])
                ([?\C-a] . [home])
                ([?\C-e] . [end])
                ([?\M-v] . [prior])
                ([?\C-v] . [next])
                ([?\C-d] . [delete])
                ([?\C-k] . [S-end delete]))))
      ;; Enable EXWM
      (exwm-enable)
      (fringe-mode 1))
#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package exwm
    :ensure t)
  (use-package exwm-config
    :config
    (js/exwm-config)
    (defun js/exwm-lock ()
      (interactive)
      (start-process "slock" nil "slock"))
    (exwm-input-set-key (kbd "s-l") #'js/exwm-lock)
    (exwm-input-set-key (kbd "<XF86Launch7>") #'other-window))
#+END_SRC

* font

#+BEGIN_SRC emacs-lisp :tangle yes
  (set-face-attribute 'default nil :height 166)
#+END_SRC

* default browser

Thank you [[https://github.com/daedreth/UncleDavesEmacs][Uncle Dave]] for this.  Also great videos [[https://www.youtube.com/channel/UCDEtZ7AKmwS0_GNJog01D2g][here]].
[[https://stackoverflow.com/questions/4506249/how-to-make-emacs-org-mode-open-links-to-sites-in-google-chrome][Stack Overflow]] on the topic.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "qutebrowser")
#+END_SRC

